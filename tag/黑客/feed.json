{
    "version": "https://jsonfeed.org/version/1",
    "title": "欢迎来到 fo 的网络安全小站 • All posts by \"黑客\" tag",
    "description": "欢迎来到 fo 的网络安全小站",
    "home_page_url": "http://zhyzhyzhy.cn",
    "items": [
        {
            "id": "http://zhyzhyzhy.cn/2022/10/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4%E9%9B%86/",
            "url": "http://zhyzhyzhy.cn/2022/10/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E6%8C%87%E4%BB%A4%E9%9B%86/",
            "title": "汇编语言指令集",
            "date_published": "2022-10-30T17:00:00.000Z",
            "content_html": "<h1 id=\"汇编语言指令集\"><a class=\"anchor\" href=\"#汇编语言指令集\">#</a> 汇编语言指令集</h1>\n<pre><code>8080汇编手册数据传输指令\n──────────────────────────────\n它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据。\n1。 通用数据传送指令。\nMOV 传送字或字节。\nMOVSX 先符号扩展，再传送。\nMOVZX 先零扩展，再传送。\nPUSH 把字压入堆栈。\nPOP 把字弹出堆栈。\nPUSHA 把AX，CX，DX，BX，SP，BP，SI，DI依次压入堆栈。\nPOPA 把DI，SI，BP，SP，BX，DX，CX，AX依次弹出堆栈。\nPUSHAD 把EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI依次压入堆栈。\nPOPAD 把EDI，ESI，EBP，ESP，EBX，EDX，ECX，EAX依次弹出堆栈。\nBSWAP 交换32位寄存器里字节的顺序\nXCHG 交换字或字节。( 至少有一个操作数为寄存器，段寄存器不可作为操作数)\nCMPXCHG 比较并交换操作数。( 第二个操作数必须为累加器AL/AX/EAX )\nXADD 先交换再累加。( 结果在第一个操作数里 )\nXLAT 字节查表转换。\n── BX 指向一张 256 字节的表的起点， AL 为表的索引值 (0-255，即\n0-FFH); 返回 AL 为查表结果。 ( [BX+AL]-&gt;AL )\n2。 输入输出端口传送指令。\nIN I/O端口输入。 ( 语法: IN 累加器， &#123;端口号│DX&#125; )\nOUT I/O端口输出。 ( 语法: OUT &#123;端口号│DX&#125;，累加器 )\n输入输出端口由立即方式指定时， 其范围是 0-255; 由寄存器 DX 指定时，\n其范围是 0-65535。\n3。 目的地址传送指令。\nLEA 装入有效地址。\n例: LEA DX，string ;把偏移地址存到DX。\nLDS 传送目标指针，把指针内容装入DS。\n例: LDS SI，string ;把段地址:偏移地址存到DS:SI。\nLES 传送目标指针，把指针内容装入ES。\n例: LES DI，string ;把段地址:偏移地址存到ES:DI。\nLFS 传送目标指针，把指针内容装入FS。\n例: LFS DI，string ;把段地址:偏移地址存到FS:DI。\nLGS 传送目标指针，把指针内容装入GS。\n例: LGS DI，string ;把段地址:偏移地址存到GS:DI。\nLSS 传送目标指针，把指针内容装入SS。\n例: LSS DI，string ;把段地址:偏移地址存到SS:DI。\n4。 标志传送指令。\nLAHF 标志寄存器传送，把标志装入AH。\nSAHF 标志寄存器传送，把AH内容装入标志寄存器。\nPUSHF 标志入栈。\nPOPF 标志出栈。\nPUSHD 32位标志入栈。\nPOPD 32位标志出栈。\n二、算术运算指令\n──────────────────────────────\nADD 加法。\nADC 带进位加法。\nINC 加 1。\nAAA 加法的ASCII码调整。\nDAA 加法的十进制调整。\nSUB 减法。\nSBB 带借位减法。\nDEC 减 1。\nNEC 求反(以 0 减之)。\nCMP 比较。(两操作数作减法，仅修改标志位，不回送结果)。\nAAS 减法的ASCII码调整。\nDAS 减法的十进制调整。\nMUL 无符号乘法。\nIMUL 整数乘法。\n以上两条，结果回送AH和AL(字节运算)，或DX和AX(字运算)，\nAAM 乘法的ASCII码调整。\nDIV 无符号除法。\nIDIV 整数除法。\n以上两条，结果回送:\n商回送AL，余数回送AH， (字节运算);\n或 商回送AX，余数回送DX， (字运算)。\nAAD 除法的ASCII码调整。\nCBW 字节转换为字。 (把AL中字节的符号扩展到AH中去)\nCWD 字转换为双字。 (把AX中的字的符号扩展到DX中去)\nCWDE 字转换为双字。 (把AX中的字符号扩展到EAX中去)\nCDQ 双字扩展。 (把EAX中的字的符号扩展到EDX中去)\n三、逻辑运算指令\n────────────────────────────\nAND 与运算。\nOR 或运算。\nXOR 异或运算。\nNOT 取反。\nTEST 测试。(两操作数作与运算，仅修改标志位，不回送结果)。\nSHL 逻辑左移。\nSAL 算术左移。(=SHL)\nSHR 逻辑右移。\nSAR 算术右移。(=SHR)\nROL 循环左移。\nROR 循环右移。\nRCL 通过进位的循环左移。\nRCR 通过进位的循环右移。\n以上八种移位指令，其移位次数可达255次。\n移位一次时， 可直接用操作码。 如 SHL AX，1。\n移位&gt;1次时， 则由寄存器CL给出移位次数。\n如 MOV CL，04\nSHL AX，CL\n四、串指令\n───────────────────────────\nDS:SI 源串段寄存器 :源串变址。\nES:DI 目标串段寄存器:目标串变址。\nCX 重复次数计数器。\nAL/AX 扫描值。\nD标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量。\nZ标志 用来控制扫描或比较操作的结束。\nMOVS 串传送。\n( MOVSB 传送字符。 MOVSW 传送字。 MOVSD 传送双字。 )\nCMPS 串比较。\n( CMPSB 比较字符。 CMPSW 比较字。 )\nSCAS 串扫描。\n把AL或AX的内容与目标串作比较，比较结果反映在标志位。\nLODS 装入串。\n把源串中的元素(字或字节)逐一装入AL或AX中。\n( LODSB 传送字符。 LODSW 传送字。 LODSD 传送双字。 )\nSTOS 保存串。\n是LODS的逆过程。\nREP 当CX/ECX&lt;&gt;0时重复。\nREPE/REPZ 当ZF=1或比较结果相等，且CX/ECX&lt;&gt;0时重复。\nREPNE/REPNZ 当ZF=0或比较结果不相等，且CX/ECX&lt;&gt;0时重复。\nREPC 当CF=1且CX/ECX&lt;&gt;0时重复。\nREPNC 当CF=0且CX/ECX&lt;&gt;0时重复。\n五、程序转移指令\n──────────────────────────\n1&gt;无条件转移指令 (长转移)\nJMP 无条件转移指令\nCALL 过程调用\nRET/RETF过程返回。\n2&gt;条件转移指令 (短转移，-128到+127的距离内)\n( 当且仅当(SF XOR OF)=1时，OP1 JA/JNBE 不小于或不等于时转移。\nJAE/JNB 大于或等于转移。\nJB/JNAE 小于转移。\nJBE/JNA 小于或等于转移。\n以上四条，测试无符号整数运算的结果(标志C和Z)。\nJG/JNLE 大于转移。\nJGE/JNL 大于或等于转移。\nJL/JNGE 小于转移。\nJLE/JNG 小于或等于转移。\n以上四条，测试带符号整数运算的结果(标志S，O和Z)。\nJE/JZ 等于转移。\nJNE/JNZ 不等于时转移。\nJC 有进位时转移。\nJNC 无进位时转移。\nJNO 不溢出时转移。\nJNP/JPO 奇偶性为奇数时转移。\nJNS 符号位为 &quot;0&quot; 时转移。\nJO 溢出转移。\nJP/JPE 奇偶性为偶数时转移。\nJS 符号位为 &quot;1&quot; 时转移。\n3&gt;循环控制指令(短转移)\nLOOP CX不为零时循环。\nLOOPE/LOOPZ CX不为零且标志Z=1时循环。\nLOOPNE/LOOPNZ CX不为零且标志Z=0时循环。\nJCXZ CX为零时转移。\nJECXZ ECX为零时转移。\n4&gt;中断指令\nINT 中断指令\nINTO 溢出中断\nIRET 中断返回\n5&gt;处理器控制指令\nHLT 处理器暂停， 直到出现中断或复位信号才继续。\nWAIT 当芯片引线TEST为高电平时使CPU进入等待状态。\nESC 转换到外处理器。\nLOCK 封锁总线。\nNOP 空操作。\nSTC 置进位标志位。\nCLC 清进位标志位。\nCMC 进位标志取反。\nSTD 置方向标志位。\nCLD 清方向标志位。\nSTI 置中断允许位。\nCLI 清中断允许位。\n六、伪指令\n───────────────────────────\nDW 定义字(2字节)。\nPROC 定义过程。\nENDP 过程结束。\nSEGMENT 定义段。\nASSUME 建立段寄存器寻址。\nENDS 段结束。\nEND 程序结束。\n\n一.机械码,又称机器码.\nultraedit打开,编辑exe文件时你会看到\n许许多多的由0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F组成的数码,这些数码\n就是机器码.\n修改程序时必须通过修改机器码来修改exe文件.\n\n二.需要熟练掌握的全部汇编知识(只有这么多)\n不大容易理解,可先强行背住,混个脸儿熟,以后慢慢的就理解了\ncmp a,b 比较a与b\nmov a,b 把b的值送给a\nret 返回主程序\nnop 无作用,英文“no operation”的简写，意思是“do nothing”(机器码90)***机器码的含义参看上面\n(解释:ultraedit打开编辑exe文件时你看到90,等同于汇编语句nop)\ncall 调用子程序\nje 或jz 若相等则跳(机器码74 或0F84)\njne或jnz 若不相等则跳(机器码75或0F85)\njmp 无条件跳(机器码EB)\njb 若小于则跳\nja 若大于则跳\njg 若大于则跳\njge 若大于等于则跳\njl 若小于则跳\njle 若小于等于则跳\npop 出栈\npush 压栈\n\n三.常见修改(机器码)\n74=&gt;75 74=&gt;90 74=&gt;EB\n75=&gt;74 75=&gt;90 75=&gt;EB\n\njnz-&gt;nop\n75-&gt;90(相应的机器码修改)\n\njnz -&gt; jmp\n75 -&gt; EB(相应的机器码修改)\n\njnz -&gt; jz\n75-&gt;74 (正常) 0F 85 -&gt; 0F 84(特殊情况下,有时,相应的机器码修改)\n\n四.两种不同情况的不同修改方法\n1.修改为jmp\nje(jne,jz,jnz) =&gt;jmp相应的机器码EB （出错信息向上找到的第一个跳转）jmp的作用是绝对跳，无条件跳，从而跳过下面的出错信息\n\nxxxxxxxxxxxx 出错信息，例如：注册码不对，sorry,未注册版不能...，&quot;Function Not Avaible in Demo&quot; 或 &quot;Command Not Avaible&quot; 或 &quot;Can't save in Shareware/Demo&quot;等 （我们希望把它跳过，不让它出现）\n。。。\n。。。\nxxxxxxxxxxxx 正确路线所在\n\n2.修改为nop\nje(jne,jz,jnz) =&gt;nop相应的机器码90 （正确信息向上找到的第一个跳转） nop的作用是抹掉这个跳转，使这个跳转无效，失去作用，从而使程序顺利来到紧跟其后的正确信息处\n\nxxxxxxxxxxxx 正确信息，例如：注册成功，谢谢您的支持等（我们希望它不被跳过，让它出现，程序一定要顺利来到这里）\n。。。\n。。。\nxxxxxxxxxxxx 出错信息（我们希望不要跳到这里，不让它出现）它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据.\n1. 通用数据传送指令.\nMOV 传送字或字节.\nMOVSX 先符号扩展,再传送.\nMOVZX 先零扩展,再传送.\nPUSH 把字压入堆栈.\nPOP 把字弹出堆栈.\nPUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.\nPOPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.\nPUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.\nPOPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.\nBSWAP 交换32位寄存器里字节的顺序\nXCHG 交换字或字节.( 至少有一个操作数为寄存器,段寄存器不可作为操作数)\nCMPXCHG 比较并交换操作数.( 第二个操作数必须为累加器AL/AX/EAX )\nXADD 先交换再累加.( 结果在第一个操作数里 )\nXLAT 字节查表转换.\n── BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即\n0-FFH); 返回 AL 为查表结果. ( [BX+AL]-&gt;AL )\n2. 输入输出端口传送指令.\nIN I/O端口输入. ( 语法: IN 累加器, &#123;端口号│DX&#125; )\nOUT I/O端口输出. ( 语法: OUT &#123;端口号│DX&#125;,累加器 )\n输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,\n其范围是 0-65535.\n3. 目的地址传送指令.\nLEA 装入有效地址.\n例: LEA DX,string ;把偏移地址存到DX.\nLDS 传送目标指针,把指针内容装入DS.\n例: LDS SI,string ;把段地址:偏移地址存到DS:SI.\nLES 传送目标指针,把指针内容装入ES.\n例: LES DI,string ;把段地址:偏移地址存到ESI.\nLFS 传送目标指针,把指针内容装入FS.\n例: LFS DI,string ;把段地址:偏移地址存到FSI.\nLGS 传送目标指针,把指针内容装入GS.\n例: LGS DI,string ;把段地址:偏移地址存到GSI.\nLSS 传送目标指针,把指针内容装入SS.\n例: LSS DI,string ;把段地址:偏移地址存到SSI.\n4. 标志传送指令.\nLAHF 标志寄存器传送,把标志装入AH.\nSAHF 标志寄存器传送,把AH内容装入标志寄存器.\nPUSHF 标志入栈.\nPOPF 标志出栈.\nPUSHD 32位标志入栈.\nPOPD 32位标志出栈.\n\n二、算术运算指令\n───────────────────────────────────────\nADD 加法.\nADC 带进位加法.\nINC 加 1.\nAAA 加法的ASCII码调整.\nDAA 加法的十进制调整.\nSUB 减法.\nSBB 带借位减法.\nDEC 减 1.\nNEC 求反(以 0 减之).\nCMP 比较.(两操作数作减法,仅修改标志位,不回送结果).\nAAS 减法的ASCII码调整.\nDAS 减法的十进制调整.\nMUL 无符号乘法.\nIMUL 整数乘法.\n以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算),\nAAM 乘法的ASCII码调整.\nDIV 无符号除法.\nIDIV 整数除法.\n以上两条,结果回送:\n商回送AL,余数回送AH, (字节运算);\n或 商回送AX,余数回送DX, (字运算).\nAAD 除法的ASCII码调整.\nCBW 字节转换为字. (把AL中字节的符号扩展到AH中去)\nCWD 字转换为双字. (把AX中的字的符号扩展到DX中去)\nCWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)\nCDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)\n\n三、逻辑运算指令\n───────────────────────────────────────\nAND 与运算.\nOR 或运算.\nXOR 异或运算.\nNOT 取反.\nTEST 测试.(两操作数作与运算,仅修改标志位,不回送结果).\nSHL 逻辑左移.\nSAL 算术左移.(=SHL)\nSHR 逻辑右移.\nSAR 算术右移.(=SHR)\nROL 循环左移.\nROR 循环右移.\nRCL 通过进位的循环左移.\nRCR 通过进位的循环右移.\n以上八种移位指令,其移位次数可达255次.\n移位一次时, 可直接用操作码. 如 SHL AX,1.\n移位&gt;1次时, 则由寄存器CL给出移位次数.\n如 MOV CL,04\nSHL AX,CL\n\n四、串指令\n───────────────────────────────────────\nDS:SI 源串段寄存器 :源串变址.\nESI 目标串段寄存器:目标串变址.\nCX 重复次数计数器.\nAL/AX 扫描值.\nD标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量.\nZ标志 用来控制扫描或比较操作的结束.\nMOVS 串传送.\n( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )\nCMPS 串比较.\n( CMPSB 比较字符. CMPSW 比较字. )\nSCAS 串扫描.\n把AL或AX的内容与目标串作比较,比较结果反映在标志位.\nLODS 装入串.\n把源串中的元素(字或字节)逐一装入AL或AX中.\n( LODSB 传送字符. LODSW 传送字. LODSD 传送双字. )\nSTOS 保存串.\n是LODS的逆过程.\nREP 当CX/ECX&lt;&gt;0时重复.\nREPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复.\nREPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复.\nREPC 当CF=1且CX/ECX&lt;&gt;0时重复.\nREPNC 当CF=0且CX/ECX&lt;&gt;0时重复.\n\n五、程序转移指令\n───────────────────────────────────────\n1&gt;无条件转移指令 (长转移)\nJMP 无条件转移指令\nCALL 过程调用\nRET/RETF过程返回.\n2&gt;条件转移指令 (短转移,-128到+127的距离内)\n( 当且仅当(SF XOR OF)=1时,OP1&lt;OP2 )\nJA/JNBE 不小于或不等于时转移.\nJAE/JNB 大于或等于转移.\nJB/JNAE 小于转移.\nJBE/JNA 小于或等于转移.\n以上四条,测试无符号整数运算的结果(标志C和Z).\nJG/JNLE 大于转移.\nJGE/JNL 大于或等于转移.\nJL/JNGE 小于转移.\nJLE/JNG 小于或等于转移.\n以上四条,测试带符号整数运算的结果(标志S,O和Z).\nJE/JZ 等于转移.\nJNE/JNZ 不等于时转移.\nJC 有进位时转移.\nJNC 无进位时转移.\nJNO 不溢出时转移.\nJNP/JPO 奇偶性为奇数时转移.\nJNS 符号位为 &quot;0&quot; 时转移.\nJO 溢出转移.\nJP/JPE 奇偶性为偶数时转移.\nJS 符号位为 &quot;1&quot; 时转移.\n3&gt;循环控制指令(短转移)\nLOOP CX不为零时循环.\nLOOPE/LOOPZ CX不为零且标志Z=1时循环.\nLOOPNE/LOOPNZ CX不为零且标志Z=0时循环.\nJCXZ CX为零时转移.\nJECXZ ECX为零时转移.\n4&gt;中断指令\nINT 中断指令\nINTO 溢出中断\nIRET 中断返回\n5&gt;处理器控制指令\nHLT 处理器暂停, 直到出现中断或复位信号才继续.\nWAIT 当芯片引线TEST为高电平时使CPU进入等待状态.\nESC 转换到外处理器.\nLOCK 封锁总线.\nNOP 空操作.\nSTC 置进位标志位.\nCLC 清进位标志位.\nCMC 进位标志取反.\nSTD 置方向标志位.\nCLD 清方向标志位.\nSTI 置中断允许位.\nCLI 清中断允许位.\n\n六、伪指令\n───────────────────────────────────────\nDW 定义字(2字节).\nPROC 定义过程.\nENDP 过程结束.\nSEGMENT 定义段.\nASSUME 建立段寄存器寻址.\nENDS 段结束.\nEND 程序结束\n</code></pre>\n",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%AC%BA%E9%AA%97/",
            "url": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%AC%BA%E9%AA%97/",
            "title": "JARM签名欺骗， 我现在是 Cobalt Strike 服务器！",
            "date_published": "2022-10-23T18:00:00.000Z",
            "content_html": "<h1 id=\"jarm签名欺骗\"><a class=\"anchor\" href=\"#jarm签名欺骗\">#</a> JARM 签名欺骗</h1>\n<p>JARM 是非常有用的指纹识别工具，但可以通过从其他服务重放服务器 hello 来欺骗。</p>\n<p>JARM 扫描器是一种非常有效的系统指纹识别工具。它使用来自 TLS 握手的 Server Hello 响应来生成签名。然后可以使用这些来查找类似的软件或服务。非常适合查找 C2 或其他实施 TLS 的恶意服务器。因此，shodan.io 在其扫描仪中使用这种指纹识别机制也就不足为奇了。阅读<a href=\"http://zhyzhyzhy.cn:7001/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/\"> JARM 指纹识别</a>相关的帖子，了解更过的知识。</p>\n<h2 id=\"那么问题来了是否有可能欺骗这些-jarm-签名让我们来了解一下\"><a class=\"anchor\" href=\"#那么问题来了是否有可能欺骗这些-jarm-签名让我们来了解一下\">#</a> 那么问题来了：是否有可能欺骗这些 JARM 签名？让我们来了解一下！</h2>\n<p>我们知道，扫描 Cobalt Strike 服务器会产生以下签名 07d14d16d21d21d07c42d41d00041d24a458a375eef0c576d23a7bab9a9fb1</p>\n<p>Cobalt Strike 博客中揭示了此签名不是 Cobalt Strike 特有的。无论如何，让我们仍然使用它作为起点。</p>\n<p>首先，我可以使用资产测绘工具来查找具有匹配哈希的服务器。使用 jarmscan 对其进行了扫描，并创建了响应的数据包捕获。Wireshark 中的 ssl 握手 (filter:ssl.handshake.type == 1) 过滤器将显示扫描仪发送的所有 TLS 客户端 Hello。</p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481427_628e1fd3c9eeeb9ef30e9.png!small\" alt=\"12\" /></p>\n<p>反过来，“Cobalt Strike” 服务器将返回其服务器 Hello。jarmscan 将使用它们生成唯一的签名（filter:ssl.handshake.type==2）。</p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481415_628e1fc77d3fefa687987.png!small\" alt=\"\" /><br />\n这些 Server Hello 是我们想要重放的数据包。这可以通过设置一个监听特定 Client Hello 的 TCP 服务器轻松完成，然后重播从所谓的 Cobalt Strike 服务器捕获的相应 Server Hello。一种相当方便但有效的方法。</p>\n<blockquote>\n<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzMzNDI5OC5odG1s\">https://www.freebuf.com/articles/web/334298.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        },
        {
            "id": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/",
            "url": "http://zhyzhyzhy.cn/2022/10/24/JARM%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/",
            "title": "JARM 指纹识别",
            "date_published": "2022-10-23T17:00:00.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>JARM 是一个活动的传输层安全 (TLS) 服务器指纹识别工具。</p>\n<p>使用 JARM 进行扫描提供了识别和分组 Internet 上的恶意服务器的能力。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NhbGVzZm9yY2UvamFybQ==\">JARM tools</span></p>\n<h2 id=\"jarm-指纹可用于\"><a class=\"anchor\" href=\"#jarm-指纹可用于\">#</a> JARM 指纹可用于：</h2>\n<p>快速验证组中的所有服务器是否具有相同的 TLS 配置。</p>\n<p>通过配置对 Internet 上的不同服务器进行分组，例如，识别服务器可能属于 Google、Salesforce 和 Apple。</p>\n<p>识别默认应用程序或基础架构。</p>\n<p>识别 Internet 上的恶意软件命令和控制基础设施以及其他恶意服务器。</p>\n<h2 id=\"本文中您将了解到\"><a class=\"anchor\" href=\"#本文中您将了解到\">#</a> 本文中，您将了解到：</h2>\n<p>JARM 是如何工作的。</p>\n<p>如何使用 JARM 来识别恶意服务器。</p>\n<p>从被动网络安全黑名单转变为主动网络安全黑名单。</p>\n<p>如何将 JARM 部署到您的检测和响应管道中。</p>\n<p>JARM 如何用于配置验证和应用程序识别。</p>\n<h2 id=\"jarm-的工作原理\"><a class=\"anchor\" href=\"#jarm-的工作原理\">#</a> JARM 的工作原理</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-V</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>JARM version <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-h</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>usage: jarm.py <span class=\"token punctuation\">[</span>-h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-i INPUT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-p PORT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-v<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-V<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-o OUTPUT<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-P PROXY<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>scan<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Enter an IP address and port to scan.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>positional arguments:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  scan                  Enter an IP or domain to scan.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>options:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  -h, <span class=\"token parameter variable\">--help</span>            show this <span class=\"token builtin class-name\">help</span> message and <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token parameter variable\">-i</span> INPUT, <span class=\"token parameter variable\">--input</span> INPUT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        Provide a list of IP addresses or domains to scan, one domain or IP address per line. Optional:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        Specify port to scan with comma separation <span class=\"token punctuation\">(</span>e.g. <span class=\"token number\">8.8</span>.4.4,853<span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> PORT, <span class=\"token parameter variable\">--port</span> PORT  Enter a port to scan <span class=\"token punctuation\">(</span>default <span class=\"token number\">443</span><span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  -v, <span class=\"token parameter variable\">--verbose</span>         Verbose mode: displays the JARM results before being hashed.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  -V, <span class=\"token parameter variable\">--version</span>         Print out version and exit.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token parameter variable\">-o</span> OUTPUT, <span class=\"token parameter variable\">--output</span> OUTPUT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        Provide a filename to output/append results to a CSV file.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  -j, <span class=\"token parameter variable\">--json</span>            Output ndjson <span class=\"token punctuation\">(</span>either to <span class=\"token function\">file</span> or stdout<span class=\"token punctuation\">;</span> overrides <span class=\"token parameter variable\">--output</span> defaults to CSV<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token parameter variable\">-P</span> PROXY, <span class=\"token parameter variable\">--proxy</span> PROXY</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        To use a SOCKS5 proxy, provide address:port.</pre></td></tr></table></figure><p>在学习 JARM 的工作原理之前，了解 TLS 的工作原理很重要。TLS 及其前身 SSL 用于加密常见应用程序（如 Internet 浏览器）的通信，以确保数据安全，也用于加密恶意软件，因此它可以进行隐藏在噪声中。中要启动 TLS 会话，客户端将在 TCP 三次握手之后发送 TLS Client Hello 消息。此数据包及其生成方式取决于构建客户端应用程序时使用的包和方法。服务器如果接受 TLS 连接，将使用 TLS Server Hello 数据包进行响应。<br />\n<img data-src=\"https://image.3001.net/images/20220525/1653482074_628e225a76d41370b9f7d.gif!small\" alt=\"\" /><br />\nTLS 服务器根据在 TLS 客户端 Hello 数据包中接收到的详细信息制定其服务器 Hello 数据包。根据应用程序或服务器的构建方式，服务器回复 Hello 的方式可能会有所不同，包括：</p>\n<pre><code>    操作系统\n\n    操作系统版本\n\n    使用的库\n\n    使用的这些库的版本\n\n    调用库的顺序\n\n    自定义配置\n</code></pre>\n<p>所有这些因素导致每个 TLS 服务器以独特的方式响应。各种因素的组合使得不同组织部署的服务器不太可能有相同的响应。</p>\n<p>下面是在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXJlc2hhcmsuY29tLw==\"> Wireshark</span> 中查看的 TLS 客户端 Hello 和服务器 Hello 的示例。<br />\n<img data-src=\"https://image.3001.net/images/20220525/1653481840_628e2170c35b715852943.png!small\" alt=\"\" /></p>\n<p><img data-src=\"https://image.3001.net/images/20220525/1653481847_628e2177e27d38ad629ca.png!small\" alt=\"\" /><br />\nJARM 通过主动向目标 TLS 服务器发送 10 个 TLS 客户端 Hello 数据包并捕获 TLS 服务器 Hello 响应的特定属性来工作。然后以特定方式对聚合的 TLS 服务器响应进行哈希处理以生成 JARM 指纹。</p>\n<p>JARM 中的 10 个 TLS 客户端 Hello 数据包经过特殊设计，可在 TLS 服务器中提取唯一响应。JARM 以不同的顺序发送不同的 TLS 版本、密码和扩展，以收集唯一的响应。服务器是否支持 TLS 1.3？ 它会与 1.2 密码协商 TLS 1.3 吗？如果我们将密码从最弱到最强排序，它会选择哪个密码？这些是 JARM 本质上要求服务器提取最独特的响应的不寻常问题的类型。然后对 10 个响应进行哈希处理以生成 JARM 指纹。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>zhy@zhy-f0 jarm<span class=\"token punctuation\">]</span>$ python jarm.py <span class=\"token parameter variable\">-v</span> baidu.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Domain: baidu.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Resolved IP: <span class=\"token number\">220.181</span>.38.251</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>JARM: 29d29d00029d29d1fc29d29d29d29d881e59db99b9f67f908be168829ecef9</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Scan <span class=\"token number\">1</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Scan <span class=\"token number\">2</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Scan <span class=\"token number\">3</span>: <span class=\"token operator\">||</span><span class=\"token operator\">|</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Scan <span class=\"token number\">4</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">||</span>ff01-000b-0023,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Scan <span class=\"token number\">5</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">||</span>ff01-000b-0023,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Scan <span class=\"token number\">6</span>: c011<span class=\"token operator\">|</span>0302<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Scan <span class=\"token number\">7</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Scan <span class=\"token number\">8</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Scan <span class=\"token number\">9</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Scan <span class=\"token number\">10</span>: c02f<span class=\"token operator\">|</span>0303<span class=\"token operator\">|</span>http/1.1<span class=\"token operator\">|</span>ff01-000b-0023-0010</pre></td></tr></table></figure><p><img data-src=\"https://image.3001.net/images/20220525/1653481819_628e215bd6ed388c654e2.png!small\" alt=\"\" /><br />\n<img data-src=\"https://image.3001.net/images/20220525/1653481826_628e2162959126319791b.png!small\" alt=\"\" /></p>\n<p>在收到每个 TLS 服务器问候消息后，JARM 会使用 FIN 优雅地关闭连接，以免套接字打开。</p>\n<h2 id=\"jarm-示例\"><a class=\"anchor\" href=\"#jarm-示例\">#</a> JARM 示例：</h2>\n<table>\n<thead>\n<tr>\n<th>Domain</th>\n<th>JARM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3NhbGVzZm9yY2UuY29t\">salesforce.com</span></td>\n<td>2ad2ad0002ad2ad00042d42d00000069d641f34fe76acdc05c40262f8815e5</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZvcmNlLmNvbQ==\">force.com</span></td>\n<td>2ad2ad0002ad2ad00042d42d00000069d641f34fe76acdc05c40262f8815e5</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span></td>\n<td>27d40d40d29d40d1dc42d43d00041d4689ee210389f4f6b4b5b1b93f92252d</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZhY2Vib29rLmNvbQ==\">facebook.com</span></td>\n<td>27d40d40d29d40d1dc42d43d00041d4689ee210389f4f6b4b5b1b93f92252d</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2luc3RhZ3JhbS5jb20=\">instagram.com</span></td>\n<td>27d27d27d29d27d1dc41d43d00041d741011a7be03d7498e0df05581db08a9</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL29jdWx1cy5jb20=\">oculus.com</span></td>\n<td>27d27d27d29d27d1dc41d43d00041d741011a7be03d7498e0df05581db08a9</td>\n</tr>\n</tbody>\n</table>\n<p>需要注意的是，JARM 是一种高性能指纹功能，不应将其视为或与安全加密功能混淆。</p>\n<h2 id=\"如何使用-jarm-识别恶意服务器\"><a class=\"anchor\" href=\"#如何使用-jarm-识别恶意服务器\">#</a> 如何使用 JARM 识别恶意服务器</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93YW5nemhhbi4zNjAuY24vMjk2Lmh0bWw=\">https://wangzhan.360.cn/296.html</span></p>\n<blockquote>\n<p>本文转载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vc2VjdG9vbC8zMzQyOTkuaHRtbA==\">https://www.freebuf.com/sectool/334299.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络安全",
                "技术干货",
                "黑客"
            ]
        }
    ]
}